{
  "version": 3,
  "sources": ["../../svelte/src/internal/client/utils.js", "../../svelte/src/internal/client/constants.js", "../../svelte/src/internal/client/reactivity/equality.js", "../../svelte/src/internal/client/reactivity/sources.js", "../../svelte/src/internal/client/dom/reconciler.js", "../../svelte/src/internal/client/reactivity/effects.js", "../../svelte/src/internal/client/dom/task.js", "../../svelte/src/internal/client/dev/ownership.js", "../../svelte/src/internal/client/reactivity/deriveds.js", "../../svelte/src/internal/client/runtime.js", "../../svelte/src/internal/client/proxy.js", "../../svelte/src/internal/client/dom/hydration.js", "../../svelte/src/internal/client/dom/operations.js", "../../svelte/src/internal/client/dom/elements/events.js", "../../svelte/src/internal/client/render.js", "../../svelte/src/legacy/legacy-client.js"],
  "sourcesContent": ["// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var object_assign = Object.assign;\nexport var is_frozen = Object.isFrozen;\nexport var object_freeze = Object.freeze;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\n\n/** @type {Map<any, any>} */\nvar map_prototype = Map.prototype;\nvar map_set_method = map_prototype.set;\nvar map_get_method = map_prototype.get;\n\n/**\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {V} value\n */\nexport function map_set(map, key, value) {\n\tmap_set_method.call(map, key, value);\n}\n\n/**\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @return {V}\n */\nexport function map_get(map, key) {\n\treturn map_get_method.call(map, key);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n", "export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const UNOWNED = 1 << 7;\nexport const CLEAN = 1 << 8;\nexport const DIRTY = 1 << 9;\nexport const MAYBE_DIRTY = 1 << 10;\nexport const INERT = 1 << 11;\nexport const DESTROYED = 1 << 12;\nexport const IS_ELSEIF = 1 << 13;\nexport const EFFECT_RAN = 1 << 14;\n\nexport const STATE_SYMBOL = Symbol('$state');\n", "/** @type {import('#client').Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\t// eslint-disable-next-line eqeqeq\n\treturn a != a\n\t\t? // eslint-disable-next-line eqeqeq\n\t\t\tb == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/** @type {import('#client').Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n", "import { DEV } from 'esm-env';\nimport {\n\tcurrent_component_context,\n\tcurrent_reaction,\n\tcurrent_dependencies,\n\tcurrent_effect,\n\tcurrent_untracked_writes,\n\tcurrent_untracking,\n\tget,\n\tis_batching_effect,\n\tis_runes,\n\tmark_reactions,\n\tschedule_effect,\n\tset_current_untracked_writes,\n\tset_last_inspected_signal,\n\tset_signal_status,\n\tuntrack\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport { CLEAN, DERIVED, DIRTY, BRANCH_EFFECT } from '../constants.js';\nimport { UNINITIALIZED } from '../../../constants.js';\n\n/**\n * @template V\n * @param {V} value\n * @returns {import('#client').Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function source(value) {\n\t/** @type {import('#client').Source<V>} */\n\tconst source = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\treactions: null,\n\t\tequals: equals,\n\t\tv: value,\n\t\tversion: 0\n\t};\n\n\tif (DEV) {\n\t\t/** @type {import('#client').ValueDebug<V>} */ (source).inspect = new Set();\n\t}\n\n\treturn source;\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @returns {import('#client').Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value) {\n\tconst s = source(initial_value);\n\ts.equals = safe_equals;\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (current_component_context) {\n\t\t(current_component_context.d ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {import('#client').Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {import('#client').Source<V>} signal\n * @param {V} value\n * @returns {V}\n */\nexport function set(signal, value) {\n\tvar initialized = signal.v !== UNINITIALIZED;\n\n\tif (\n\t\t!current_untracking &&\n\t\tinitialized &&\n\t\tcurrent_reaction !== null &&\n\t\tis_runes() &&\n\t\t(current_reaction.f & DERIVED) !== 0\n\t) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_UNSAFE_MUTATION' +\n\t\t\t\t(DEV\n\t\t\t\t\t? \": Unsafe mutations during Svelte's render or derived phase are not permitted in runes mode. \" +\n\t\t\t\t\t\t'This can lead to unexpected errors and possibly cause infinite loops.\\n\\nIf this mutation is not meant ' +\n\t\t\t\t\t\t'to be reactive do not use the \"$state\" rune for that declaration.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\n\tif (!signal.equals(value)) {\n\t\tsignal.v = value;\n\n\t\t// Increment write version so that unowned signals can properly track dirtiness\n\t\tsignal.version++;\n\n\t\t// If the current signal is running for the first time, it won't have any\n\t\t// reactions as we only allocate and assign the reactions after the signal\n\t\t// has fully executed. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e:\n\t\t//\n\t\t// $effect(() => x++)\n\t\t//\n\t\t// We additionally want to skip this logic when initialising store sources\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tinitialized &&\n\t\t\tcurrent_effect !== null &&\n\t\t\t(current_effect.f & CLEAN) !== 0 &&\n\t\t\t(current_effect.f & BRANCH_EFFECT) === 0\n\t\t) {\n\t\t\tif (current_dependencies !== null && current_dependencies.includes(signal)) {\n\t\t\t\tset_signal_status(current_effect, DIRTY);\n\t\t\t\tschedule_effect(current_effect);\n\t\t\t} else {\n\t\t\t\tif (current_untracked_writes === null) {\n\t\t\t\t\tset_current_untracked_writes([signal]);\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_untracked_writes.push(signal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmark_reactions(signal, DIRTY, true);\n\n\t\tif (DEV) {\n\t\t\tif (is_batching_effect) {\n\t\t\t\tset_last_inspected_signal(/** @type {import('#client').ValueDebug} */ (signal));\n\t\t\t} else {\n\t\t\t\tfor (const fn of /** @type {import('#client').ValueDebug} */ (signal).inspect) fn();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn value;\n}\n", "import { is_array } from '../utils.js';\n\n/** @param {string} html */\nexport function create_fragment_from_html(html) {\n\tvar elem = document.createElement('template');\n\telem.innerHTML = html;\n\treturn elem.content;\n}\n\n/**\n * @param {import('#client').Dom} current\n */\nexport function remove(current) {\n\tif (is_array(current)) {\n\t\tfor (var i = 0; i < current.length; i++) {\n\t\t\tvar node = current[i];\n\t\t\tif (node.isConnected) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\t\t}\n\t} else if (current.isConnected) {\n\t\tcurrent.remove();\n\t}\n}\n", "import { DEV } from 'esm-env';\nimport {\n\tcheck_dirtiness,\n\tcurrent_component_context,\n\tcurrent_effect,\n\tcurrent_reaction,\n\tdestroy_effect_children,\n\texecute_effect,\n\tget,\n\tis_flushing_effect,\n\tremove_reactions,\n\tschedule_effect,\n\tset_is_flushing_effect,\n\tset_signal_status,\n\tuntrack\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tIS_ELSEIF\n} from '../constants.js';\nimport { set } from './sources.js';\nimport { noop } from '../../shared/utils.js';\nimport { remove } from '../dom/reconciler.js';\n\n/**\n * @param {import(\"#client\").Effect} effect\n * @param {import(\"#client\").Reaction} parent_effect\n */\nexport function push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {(() => void | (() => void))} fn\n * @param {boolean} sync\n * @returns {import('#client').Effect}\n */\nfunction create_effect(type, fn, sync) {\n\tvar is_root = (type & ROOT_EFFECT) !== 0;\n\t/** @type {import('#client').Effect} */\n\tvar effect = {\n\t\tctx: current_component_context,\n\t\tdeps: null,\n\t\tdom: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent: is_root ? null : current_effect,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null\n\t};\n\n\tif (current_reaction !== null && !is_root) {\n\t\tpush_effect(effect, current_reaction);\n\t}\n\n\tif (sync) {\n\t\tvar previously_flushing_effect = is_flushing_effect;\n\n\t\ttry {\n\t\t\tset_is_flushing_effect(true);\n\t\t\texecute_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} finally {\n\t\t\tset_is_flushing_effect(previously_flushing_effect);\n\t\t}\n\t} else {\n\t\tschedule_effect(effect);\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.active()`\n * @returns {boolean}\n */\nexport function effect_active() {\n\treturn current_effect ? (current_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 : false;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tif (current_effect === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_EFFECT' +\n\t\t\t\t(DEV ? ': The Svelte $effect rune can only be used during component initialisation.' : '')\n\t\t);\n\t}\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tconst defer =\n\t\tcurrent_effect.f & RENDER_EFFECT &&\n\t\t// TODO do we actually need this? removing them changes nothing\n\t\tcurrent_component_context !== null &&\n\t\t!current_component_context.m;\n\n\tif (defer) {\n\t\tconst context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\t\t(context.e ??= []).push(fn);\n\t} else {\n\t\teffect(fn);\n\t}\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function user_pre_effect(fn) {\n\tif (current_effect === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_EFFECT' +\n\t\t\t\t(DEV\n\t\t\t\t\t? ': The Svelte $effect.pre rune can only be used during component initialisation.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\n\treturn render_effect(fn);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\t// TODO is `untrack` correct here? Should `fn` re-run if its dependencies change?\n\t// Should it even be modelled as an effect?\n\tconst effect = create_effect(ROOT_EFFECT, () => untrack(fn), true);\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\n\t/** @type {{ effect: null | import('#client').Effect, ran: boolean }} */\n\tvar token = { effect: null, ran: false };\n\tcontext.l1.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail-out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tset(context.l2, true);\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\n\trender_effect(() => {\n\t\tif (!get(context.l2)) return;\n\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l1) {\n\t\t\tvar effect = token.effect;\n\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\texecute_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\n\t\tcontext.l2.v = false; // set directly to avoid rerunning this effect\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function render_effect(fn) {\n\treturn create_effect(RENDER_EFFECT, fn, true);\n}\n\n/** @param {(() => void)} fn */\nexport function block(fn) {\n\treturn create_effect(RENDER_EFFECT | BLOCK_EFFECT, fn, true);\n}\n\n/** @param {(() => void)} fn */\nexport function branch(fn) {\n\treturn create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true);\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @returns {void}\n */\nexport function destroy_effect(effect) {\n\tdestroy_effect_children(effect);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tif (effect.transitions) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\teffect.teardown?.();\n\n\tif (effect.dom !== null) {\n\t\tremove(effect.dom);\n\t}\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && (effect.f & BRANCH_EFFECT) !== 0 && parent.first !== null) {\n\t\tvar previous = effect.prev;\n\t\tvar next = effect.next;\n\t\tif (previous !== null) {\n\t\t\tif (next !== null) {\n\t\t\t\tprevious.next = next;\n\t\t\t\tnext.prev = previous;\n\t\t\t} else {\n\t\t\t\tprevious.next = null;\n\t\t\t\tparent.last = previous;\n\t\t\t}\n\t\t} else if (next !== null) {\n\t\t\tnext.prev = null;\n\t\t\tparent.first = next;\n\t\t} else {\n\t\t\tparent.first = null;\n\t\t\tparent.last = null;\n\t\t}\n\t}\n\n\teffect.first =\n\t\teffect.last =\n\t\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.dom =\n\t\teffect.deps =\n\t\teffect.parent =\n\t\t// @ts-expect-error\n\t\teffect.fn =\n\t\t\tnull;\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {import('#client').Effect} effect\n * @param {() => void} callback\n */\nexport function pause_effect(effect, callback = noop) {\n\t/** @type {import('#client').TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\tout(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tcallback();\n\t});\n}\n\n/**\n * Pause multiple effects simultaneously, and coordinate their\n * subsequent destruction. Used in each blocks\n * @param {import('#client').Effect[]} effects\n * @param {() => void} callback\n */\nexport function pause_effects(effects, callback = noop) {\n\t/** @type {import('#client').TransitionManager[]} */\n\tvar transitions = [];\n\n\tfor (var effect of effects) {\n\t\tpause_children(effect, transitions, true);\n\t}\n\n\tout(transitions, () => {\n\t\tfor (var effect of effects) {\n\t\t\tdestroy_effect(effect);\n\t\t}\n\t\tcallback();\n\t});\n}\n\n/**\n * @param {import('#client').TransitionManager[]} transitions\n * @param {() => void} fn\n */\nfunction out(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @param {import('#client').TransitionManager[]} transitions\n * @param {boolean} local\n */\nfunction pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & IS_ELSEIF) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {import('#client').Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// If a dependency of this effect changed while it was paused,\n\t// apply the change now\n\tif (check_dirtiness(effect)) {\n\t\texecute_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & IS_ELSEIF) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { run_all } from '../../shared/utils.js';\n\nlet is_task_queued = false;\nlet is_raf_queued = false;\n\n/** @type {Array<() => void>} */\nlet current_queued_tasks = [];\n/** @type {Array<() => void>} */\nlet current_raf_tasks = [];\n\nfunction process_task() {\n\tis_task_queued = false;\n\tconst tasks = current_queued_tasks.slice();\n\tcurrent_queued_tasks = [];\n\trun_all(tasks);\n}\n\nfunction process_raf_task() {\n\tis_raf_queued = false;\n\tconst tasks = current_raf_tasks.slice();\n\tcurrent_raf_tasks = [];\n\trun_all(tasks);\n}\n\n/**\n * Synchronously run any queued tasks.\n */\nexport function flush_tasks() {\n\tif (is_task_queued) {\n\t\tprocess_task();\n\t}\n\tif (is_raf_queued) {\n\t\tprocess_raf_task();\n\t}\n}\n", "/** @typedef {{ file: string, line: number, column: number }} Location */\n\nimport { STATE_SYMBOL } from '../constants.js';\nimport { untrack } from '../runtime.js';\n\n/** @type {Record<string, Array<{ start: Location, end: Location, component: Function }>>} */\nconst boundaries = {};\n\nconst chrome_pattern = /at (?:.+ \\()?(.+):(\\d+):(\\d+)\\)?$/;\nconst firefox_pattern = /@(.+):(\\d+):(\\d+)$/;\n\nfunction get_stack() {\n\tconst stack = new Error().stack;\n\tif (!stack) return null;\n\n\tconst entries = [];\n\n\tfor (const line of stack.split('\\n')) {\n\t\tlet match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);\n\n\t\tif (match) {\n\t\t\tentries.push({\n\t\t\t\tfile: match[1],\n\t\t\t\tline: +match[2],\n\t\t\t\tcolumn: +match[3]\n\t\t\t});\n\t\t}\n\t}\n\n\treturn entries;\n}\n\n/**\n * Determines which `.svelte` component is responsible for a given state change\n * @returns {Function | null}\n */\nfunction get_component() {\n\t// first 4 lines are svelte internals; adjust this number if we change the internal call stack\n\tconst stack = get_stack()?.slice(4);\n\tif (!stack) return null;\n\n\tfor (let i = 0; i < stack.length; i++) {\n\t\tconst entry = stack[i];\n\t\tconst modules = boundaries[entry.file];\n\t\tif (!modules) {\n\t\t\t// If the first entry is not a component, that means the modification very likely happened\n\t\t\t// within a .svelte.js file, possibly triggered by a component. Since these files are not part\n\t\t\t// of the bondaries/component context heuristic, we need to bail in this case, else we would\n\t\t\t// have false positives when the .svelte.ts file provides a state creator function, encapsulating\n\t\t\t// the state and its mutations, and is being called from a component other than the one who\n\t\t\t// called the state creator function.\n\t\t\tif (i === 0) return null;\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const module of modules) {\n\t\t\tif (module.start.line < entry.line && module.end.line > entry.line) {\n\t\t\t\treturn module.component;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Together with `mark_module_end`, this function establishes the boundaries of a `.svelte` file,\n * such that subsequent calls to `get_component` can tell us which component is responsible\n * for a given state change\n * @param {Function} component\n */\nexport function mark_module_start(component) {\n\tconst start = get_stack()?.[2];\n\n\tif (start) {\n\t\t(boundaries[start.file] ??= []).push({\n\t\t\tstart,\n\t\t\t// @ts-expect-error\n\t\t\tend: null,\n\t\t\tcomponent\n\t\t});\n\t}\n}\n\nexport function mark_module_end() {\n\tconst end = get_stack()?.[2];\n\n\tif (end) {\n\t\tconst boundaries_file = boundaries[end.file];\n\t\tboundaries_file[boundaries_file.length - 1].end = end;\n\t}\n}\n\n/**\n *\n * @param {any} object\n * @param {any} owner\n */\nexport function add_owner(object, owner) {\n\tuntrack(() => {\n\t\tadd_owner_to_object(object, owner);\n\t});\n}\n\n/**\n * @param {any} object\n * @param {Function} owner\n */\nfunction add_owner_to_object(object, owner) {\n\tif (object?.[STATE_SYMBOL]?.o && !object[STATE_SYMBOL].o.has(owner)) {\n\t\tobject[STATE_SYMBOL].o.add(owner);\n\n\t\tfor (const key in object) {\n\t\t\tadd_owner_to_object(object[key], owner);\n\t\t}\n\t}\n}\n\n/**\n * @param {any} object\n */\nexport function strip_owner(object) {\n\tuntrack(() => {\n\t\tstrip_owner_from_object(object);\n\t});\n}\n\n/**\n * @param {any} object\n */\nfunction strip_owner_from_object(object) {\n\tif (object?.[STATE_SYMBOL]?.o) {\n\t\tobject[STATE_SYMBOL].o = null;\n\n\t\tfor (const key in object) {\n\t\t\tstrip_owner(object[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Set<Function>} owners\n */\nexport function check_ownership(owners) {\n\tconst component = get_component();\n\n\tif (component && !owners.has(component)) {\n\t\tlet original = [...owners][0];\n\n\t\tlet message =\n\t\t\t// @ts-expect-error\n\t\t\toriginal.filename !== component.filename\n\t\t\t\t? // @ts-expect-error\n\t\t\t\t\t`${component.filename} mutated a value owned by ${original.filename}. This is strongly discouraged`\n\t\t\t\t: 'Mutating a value outside the component that created it is strongly discouraged';\n\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn(\n\t\t\t`${message}. Consider passing values to child components with \\`bind:\\`, or use a callback instead.`\n\t\t);\n\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.trace();\n\t}\n}\n", "import { DEV } from 'esm-env';\nimport { CLEAN, DERIVED, DESTROYED, DIRTY, MAYBE_DIRTY, UNOWNED } from '../constants.js';\nimport {\n\tcurrent_reaction,\n\tcurrent_effect,\n\tremove_reactions,\n\tset_signal_status,\n\tmark_reactions,\n\tcurrent_skip_reaction,\n\texecute_reaction_fn,\n\tdestroy_effect_children\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\n\nexport let updating_derived = false;\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {import('#client').Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tlet flags = DERIVED | DIRTY;\n\tif (current_effect === null) flags |= UNOWNED;\n\n\t/** @type {import('#client').Derived<V>} */\n\tconst signal = {\n\t\tdeps: null,\n\t\tderiveds: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\treactions: null,\n\t\tv: /** @type {V} */ (null),\n\t\tversion: 0\n\t};\n\n\tif (DEV) {\n\t\t/** @type {import('#client').DerivedDebug} */ (signal).inspect = new Set();\n\t}\n\n\tif (current_reaction !== null && (current_reaction.f & DERIVED) !== 0) {\n\t\tvar current_derived = /** @type {import('#client').Derived<V>} */ (current_reaction);\n\t\tif (current_derived.deriveds === null) {\n\t\t\tcurrent_derived.deriveds = [signal];\n\t\t} else {\n\t\t\tcurrent_derived.deriveds.push(signal);\n\t\t}\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {import('#client').Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {import('./types.js').Derived} signal\n * @returns {void}\n */\nfunction destroy_derived_children(signal) {\n\tdestroy_effect_children(signal);\n\tvar deriveds = signal.deriveds;\n\n\tif (deriveds !== null) {\n\t\tsignal.deriveds = null;\n\t\tfor (var i = 0; i < deriveds.length; i += 1) {\n\t\t\tdestroy_derived(deriveds[i]);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('#client').Derived} derived\n * @param {boolean} force_schedule\n * @returns {void}\n */\nexport function update_derived(derived, force_schedule) {\n\tvar previous_updating_derived = updating_derived;\n\tupdating_derived = true;\n\tdestroy_derived_children(derived);\n\tvar value = execute_reaction_fn(derived);\n\tupdating_derived = previous_updating_derived;\n\n\tvar status =\n\t\t(current_skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null\n\t\t\t? MAYBE_DIRTY\n\t\t\t: CLEAN;\n\n\tset_signal_status(derived, status);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tmark_reactions(derived, DIRTY, force_schedule);\n\n\t\tif (DEV && force_schedule) {\n\t\t\tfor (var fn of /** @type {import('#client').DerivedDebug} */ (derived).inspect) fn();\n\t\t}\n\t}\n}\n\n/**\n * @param {import('#client').Derived} signal\n * @returns {void}\n */\nexport function destroy_derived(signal) {\n\tdestroy_derived_children(signal);\n\tremove_reactions(signal, 0);\n\tset_signal_status(signal, DESTROYED);\n\n\t// TODO we need to ensure we remove the derived from any parent derives\n\n\tsignal.first =\n\t\tsignal.last =\n\t\tsignal.deps =\n\t\tsignal.reactions =\n\t\t// @ts-expect-error `signal.fn` cannot be `null` while the signal is alive\n\t\tsignal.fn =\n\t\t\tnull;\n}\n", "import { DEV } from 'esm-env';\nimport {\n\tarray_prototype,\n\tget_descriptors,\n\tget_prototype_of,\n\tis_frozen,\n\tobject_freeze,\n\tobject_prototype\n} from './utils.js';\nimport { unstate } from './proxy.js';\nimport { destroy_effect, effect, user_pre_effect } from './reactivity/effects.js';\nimport {\n\tEFFECT,\n\tRENDER_EFFECT,\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tINERT,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT\n} from './constants.js';\nimport { flush_tasks } from './dom/task.js';\nimport { add_owner } from './dev/ownership.js';\nimport { mutate, set, source } from './reactivity/sources.js';\nimport { update_derived } from './reactivity/deriveds.js';\n\nconst FLUSH_MICROTASK = 0;\nconst FLUSH_SYNC = 1;\n\n// Used for controlling the flush of effects.\nlet current_scheduler_mode = FLUSH_MICROTASK;\n// Used for handling scheduling\nlet is_micro_task_queued = false;\nexport let is_flushing_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_flushing_effect(value) {\n\tis_flushing_effect = value;\n}\n\n// Used for $inspect\nexport let is_batching_effect = false;\nlet is_inspecting_signal = false;\n\n// Handle effect queues\n\n/** @type {import('./types.js').Effect[]} */\nlet current_queued_root_effects = [];\n\nlet flush_count = 0;\n// Handle signal reactivity tree dependencies and reactions\n\n/** @type {null | import('./types.js').Reaction} */\nexport let current_reaction = null;\n\n/** @param {null | import('./types.js').Reaction} reaction */\nexport function set_current_reaction(reaction) {\n\tcurrent_reaction = reaction;\n}\n\n/** @type {null | import('./types.js').Effect} */\nexport let current_effect = null;\n\n/** @param {null | import('./types.js').Effect} effect */\nexport function set_current_effect(effect) {\n\tcurrent_effect = effect;\n}\n\n/** @type {null | import('./types.js').Value[]} */\nexport let current_dependencies = null;\nlet current_dependencies_index = 0;\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | import('./types.js').Source[]}\n */\nexport let current_untracked_writes = null;\n\n/** @param {null | import('./types.js').Source[]} value */\nexport function set_current_untracked_writes(value) {\n\tcurrent_untracked_writes = value;\n}\n\n/** @type {null | import('./types.js').ValueDebug} */\nexport let last_inspected_signal = null;\n\n/** @param {null | import('./types.js').ValueDebug} signal */\nexport function set_last_inspected_signal(signal) {\n\tlast_inspected_signal = signal;\n}\n\n/** If `true`, `get`ting the signal should not register it as a dependency */\nexport let current_untracking = false;\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let current_skip_reaction = false;\n// Handle collecting all signals which are read during a specific time frame\nexport let is_signals_recorded = false;\nlet captured_signals = new Set();\n\n/** @type {Function | null} */\nexport let inspect_fn = null;\n\n/** @type {Array<import('./types.js').ValueDebug>} */\nlet inspect_captured_signals = [];\n\n// Handling runtime component context\n/** @type {import('./types.js').ComponentContext | null} */\nexport let current_component_context = null;\n\n/** @param {import('./types.js').ComponentContext | null} context */\nexport function set_current_component_context(context) {\n\tcurrent_component_context = context;\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn current_component_context !== null && current_component_context.r;\n}\n\n/**\n * @param {import('./types.js').ProxyStateObject} target\n * @param {string | symbol} prop\n * @param {any} receiver\n */\nexport function batch_inspect(target, prop, receiver) {\n\tconst value = Reflect.get(target, prop, receiver);\n\t/**\n\t * @this {any}\n\t */\n\treturn function () {\n\t\tconst previously_batching_effect = is_batching_effect;\n\t\tis_batching_effect = true;\n\t\ttry {\n\t\t\treturn Reflect.apply(value, this, arguments);\n\t\t} finally {\n\t\t\tis_batching_effect = previously_batching_effect;\n\t\t\tif (last_inspected_signal !== null && !is_inspecting_signal) {\n\t\t\t\tis_inspecting_signal = true;\n\t\t\t\ttry {\n\t\t\t\t\tfor (const fn of last_inspected_signal.inspect) {\n\t\t\t\t\t\tfn();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tis_inspecting_signal = false;\n\t\t\t\t}\n\t\t\t\tlast_inspected_signal = null;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {import('./types.js').Reaction} reaction\n * @returns {boolean}\n */\nexport function check_dirtiness(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar length = dependencies.length;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar dependency = dependencies[i];\n\n\t\t\t\tif (check_dirtiness(/** @type {import('#client').Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {import('#client').Derived} **/ (dependency), true);\n\n\t\t\t\t\t// `signal` might now be dirty, as a result of calling `update_derived`\n\t\t\t\t\tif ((reaction.f & DIRTY) !== 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we're working with an unowned derived signal, then we need to check\n\t\t\t\t// if our dependency write version is higher. If it is then we can assume\n\t\t\t\t// that state has changed to a newer version and thus this unowned signal\n\t\t\t\t// is also dirty.\n\t\t\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\t\t\t\tvar version = dependency.version;\n\n\t\t\t\tif (is_unowned && version > /** @type {import('#client').Derived} */ (reaction).version) {\n\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction).version = version;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tset_signal_status(reaction, CLEAN);\n\t}\n\n\treturn false;\n}\n\n/**\n * @template V\n * @param {import('./types.js').Reaction} signal\n * @returns {V}\n */\nexport function execute_reaction_fn(signal) {\n\tconst previous_dependencies = current_dependencies;\n\tconst previous_dependencies_index = current_dependencies_index;\n\tconst previous_untracked_writes = current_untracked_writes;\n\tconst previous_reaction = current_reaction;\n\tconst previous_skip_reaction = current_skip_reaction;\n\tconst previous_untracking = current_untracking;\n\n\tcurrent_dependencies = /** @type {null | import('./types.js').Value[]} */ (null);\n\tcurrent_dependencies_index = 0;\n\tcurrent_untracked_writes = null;\n\tcurrent_reaction = signal;\n\tcurrent_skip_reaction = !is_flushing_effect && (signal.f & UNOWNED) !== 0;\n\tcurrent_untracking = false;\n\n\ttry {\n\t\tlet res = signal.fn();\n\t\tlet dependencies = /** @type {import('./types.js').Value<unknown>[]} **/ (signal.deps);\n\t\tif (current_dependencies !== null) {\n\t\t\tlet i;\n\t\t\tif (dependencies !== null) {\n\t\t\t\tconst deps_length = dependencies.length;\n\t\t\t\t// Include any dependencies up until the current_dependencies_index.\n\t\t\t\tconst full_current_dependencies =\n\t\t\t\t\tcurrent_dependencies_index === 0\n\t\t\t\t\t\t? current_dependencies\n\t\t\t\t\t\t: dependencies.slice(0, current_dependencies_index).concat(current_dependencies);\n\t\t\t\tconst current_dep_length = full_current_dependencies.length;\n\t\t\t\t// If we have more than 16 elements in the array then use a Set for faster performance\n\t\t\t\t// TODO: evaluate if we should always just use a Set or not here?\n\t\t\t\tconst full_current_dependencies_set =\n\t\t\t\t\tcurrent_dep_length > 16 && deps_length - current_dependencies_index > 1\n\t\t\t\t\t\t? new Set(full_current_dependencies)\n\t\t\t\t\t\t: null;\n\t\t\t\tfor (i = current_dependencies_index; i < deps_length; i++) {\n\t\t\t\t\tconst dependency = dependencies[i];\n\t\t\t\t\tif (\n\t\t\t\t\t\tfull_current_dependencies_set !== null\n\t\t\t\t\t\t\t? !full_current_dependencies_set.has(dependency)\n\t\t\t\t\t\t\t: !full_current_dependencies.includes(dependency)\n\t\t\t\t\t) {\n\t\t\t\t\t\tremove_reaction(signal, dependency);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dependencies !== null && current_dependencies_index > 0) {\n\t\t\t\tdependencies.length = current_dependencies_index + current_dependencies.length;\n\t\t\t\tfor (i = 0; i < current_dependencies.length; i++) {\n\t\t\t\t\tdependencies[current_dependencies_index + i] = current_dependencies[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsignal.deps = /** @type {import('./types.js').Value<V>[]} **/ (\n\t\t\t\t\tdependencies = current_dependencies\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!current_skip_reaction) {\n\t\t\t\tfor (i = current_dependencies_index; i < dependencies.length; i++) {\n\t\t\t\t\tconst dependency = dependencies[i];\n\t\t\t\t\tconst reactions = dependency.reactions;\n\n\t\t\t\t\tif (reactions === null) {\n\t\t\t\t\t\tdependency.reactions = [signal];\n\t\t\t\t\t} else if (reactions[reactions.length - 1] !== signal) {\n\t\t\t\t\t\t// TODO: should this be:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// } else if (!reactions.includes(signal)) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\treactions.push(signal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (dependencies !== null && current_dependencies_index < dependencies.length) {\n\t\t\tremove_reactions(signal, current_dependencies_index);\n\t\t\tdependencies.length = current_dependencies_index;\n\t\t}\n\t\treturn res;\n\t} finally {\n\t\tcurrent_dependencies = previous_dependencies;\n\t\tcurrent_dependencies_index = previous_dependencies_index;\n\t\tcurrent_untracked_writes = previous_untracked_writes;\n\t\tcurrent_reaction = previous_reaction;\n\t\tcurrent_skip_reaction = previous_skip_reaction;\n\t\tcurrent_untracking = previous_untracking;\n\t}\n}\n\n/**\n * @template V\n * @param {import('./types.js').Reaction} signal\n * @param {import('./types.js').Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tconst reactions = dependency.reactions;\n\tlet reactions_length = 0;\n\tif (reactions !== null) {\n\t\treactions_length = reactions.length - 1;\n\t\tconst index = reactions.indexOf(signal);\n\t\tif (index !== -1) {\n\t\t\tif (reactions_length === 0) {\n\t\t\t\tdependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[reactions_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (reactions_length === 0 && (dependency.f & UNOWNED) !== 0) {\n\t\t// If the signal is unowned then we need to make sure to change it to dirty.\n\t\tset_signal_status(dependency, DIRTY);\n\t\tremove_reactions(/** @type {import('./types.js').Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {import('./types.js').Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tconst dependencies = signal.deps;\n\tif (dependencies !== null) {\n\t\tconst active_dependencies = start_index === 0 ? null : dependencies.slice(0, start_index);\n\t\tlet i;\n\t\tfor (i = start_index; i < dependencies.length; i++) {\n\t\t\tconst dependency = dependencies[i];\n\t\t\t// Avoid removing a reaction if we know that it is active (start_index will not be 0)\n\t\t\tif (active_dependencies === null || !active_dependencies.includes(dependency)) {\n\t\t\t\tremove_reaction(signal, dependency);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./types.js').Reaction} signal\n * @returns {void}\n */\nexport function destroy_effect_children(signal) {\n\tlet effect = signal.first;\n\tsignal.first = null;\n\tsignal.last = null;\n\tvar sibling;\n\twhile (effect !== null) {\n\t\tsibling = effect.next;\n\t\tdestroy_effect(effect);\n\t\teffect = sibling;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} effect\n * @returns {void}\n */\nexport function execute_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar component_context = effect.ctx;\n\n\tvar previous_effect = current_effect;\n\tvar previous_component_context = current_component_context;\n\n\tcurrent_effect = effect;\n\tcurrent_component_context = component_context;\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) === 0) {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\n\t\teffect.teardown?.();\n\t\tvar teardown = execute_reaction_fn(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t} finally {\n\t\tcurrent_effect = previous_effect;\n\t\tcurrent_component_context = previous_component_context;\n\t}\n}\n\nfunction infinite_loop_guard() {\n\tif (flush_count > 1000) {\n\t\tflush_count = 0;\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_TOO_MANY_UPDATES' +\n\t\t\t\t(DEV\n\t\t\t\t\t? ': Maximum update depth exceeded. This can happen when a reactive block or effect ' +\n\t\t\t\t\t\t'repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\tflush_count++;\n}\n\n/**\n * @param {Array<import('./types.js').Effect>} root_effects\n * @returns {void}\n */\nfunction flush_queued_root_effects(root_effects) {\n\tfor (var i = 0; i < root_effects.length; i++) {\n\t\tvar signal = root_effects[i];\n\t\tflush_nested_effects(signal, RENDER_EFFECT | EFFECT);\n\t}\n}\n\n/**\n * @param {Array<import('./types.js').Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tinfinite_loop_guard();\n\tfor (var i = 0; i < length; i++) {\n\t\tvar effect = effects[i];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0 && check_dirtiness(effect)) {\n\t\t\texecute_effect(effect);\n\t\t}\n\t}\n}\n\nfunction process_microtask() {\n\tis_micro_task_queued = false;\n\tif (flush_count > 101) {\n\t\treturn;\n\t}\n\tconst previous_queued_root_effects = current_queued_root_effects;\n\tcurrent_queued_root_effects = [];\n\tflush_queued_root_effects(previous_queued_root_effects);\n\tif (!is_micro_task_queued) {\n\t\tflush_count = 0;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tif (current_scheduler_mode === FLUSH_MICROTASK) {\n\t\tif (!is_micro_task_queued) {\n\t\t\tis_micro_task_queued = true;\n\t\t\tqueueMicrotask(process_microtask);\n\t\t}\n\t}\n\n\tvar effect = signal;\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\tif ((flags & BRANCH_EFFECT) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t}\n\t}\n\n\tcurrent_queued_root_effects.push(effect);\n}\n\n/**\n *\n * This function recursively collects effects in topological order from the starting effect passed in.\n * Effects will be collected when they match the filtered bitwise flag passed in only. The collected\n * array will be populated with all the effects.\n *\n * In an ideal world, we could just execute effects as we encounter them using this approach. However,\n * this isn't possible due to how effects in Svelte are modelled to be possibly side-effectful. Thus,\n * executing an effect might invalidate other parts of the tree, which means this this tree walking function\n * will possibly pick up effects that are dirty too soon.\n *\n * @param {import('./types.js').Effect} effect\n * @param {number} filter_flags\n * @param {boolean} shallow\n * @param {import('./types.js').Effect[]} collected_user\n * @returns {void}\n */\nfunction recursively_process_effects(effect, filter_flags, shallow, collected_user) {\n\tvar current_child = effect.first;\n\tvar user = [];\n\n\twhile (current_child !== null) {\n\t\tvar child = current_child;\n\t\tcurrent_child = child.next;\n\t\tvar flags = child.f;\n\t\tvar is_inactive = (flags & (DESTROYED | INERT)) !== 0;\n\t\tif (is_inactive) continue;\n\t\tvar is_branch = flags & BRANCH_EFFECT;\n\t\tvar is_clean = (flags & CLEAN) !== 0;\n\n\t\tif (is_branch) {\n\t\t\t// Skip this branch if it's clean\n\t\t\tif (is_clean) continue;\n\t\t\tset_signal_status(child, CLEAN);\n\t\t}\n\n\t\tif ((flags & RENDER_EFFECT) !== 0) {\n\t\t\tif (is_branch) {\n\t\t\t\tif (shallow) continue;\n\t\t\t\t// TODO we don't need to call recursively_process_effects recursively with a linked list in place\n\t\t\t\trecursively_process_effects(child, filter_flags, false, collected_user);\n\t\t\t} else {\n\t\t\t\tif (check_dirtiness(child)) {\n\t\t\t\t\texecute_effect(child);\n\t\t\t\t}\n\t\t\t\t// TODO we don't need to call recursively_process_effects recursively with a linked list in place\n\t\t\t\trecursively_process_effects(child, filter_flags, false, collected_user);\n\t\t\t}\n\t\t} else if ((flags & EFFECT) !== 0) {\n\t\t\tif (is_branch || is_clean) {\n\t\t\t\tif (shallow) continue;\n\t\t\t\t// TODO we don't need to call recursively_process_effects recursively with a linked list in place\n\t\t\t\trecursively_process_effects(child, filter_flags, false, collected_user);\n\t\t\t} else {\n\t\t\t\tuser.push(child);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (user.length > 0) {\n\t\tif ((filter_flags & EFFECT) !== 0) {\n\t\t\tcollected_user.push(...user);\n\t\t}\n\n\t\tif (!shallow) {\n\t\t\tfor (var i = 0; i < user.length; i++) {\n\t\t\t\t// TODO we don't need to call recursively_process_effects recursively with a linked list in place\n\t\t\t\trecursively_process_effects(user[i], filter_flags, false, collected_user);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *\n * This function recursively collects effects in topological order from the starting effect passed in.\n * Effects will be collected when they match the filtered bitwise flag passed in only. The collected\n * array will be populated with all the effects.\n *\n * @param {import('./types.js').Effect} effect\n * @param {number} filter_flags\n * @param {boolean} [shallow]\n * @returns {void}\n */\nfunction flush_nested_effects(effect, filter_flags, shallow = false) {\n\t/** @type {import('#client').Effect[]} */\n\tvar user_effects = [];\n\n\tvar previously_flushing_effect = is_flushing_effect;\n\tis_flushing_effect = true;\n\n\ttry {\n\t\t// When working with custom elements, the root effects might not have a root\n\t\tif (effect.first === null && (effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tflush_queued_effects([effect]);\n\t\t} else {\n\t\t\trecursively_process_effects(effect, filter_flags, shallow, user_effects);\n\t\t\tflush_queued_effects(user_effects);\n\t\t}\n\t} finally {\n\t\tis_flushing_effect = previously_flushing_effect;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} effect\n * @returns {void}\n */\nexport function flush_local_render_effects(effect) {\n\t// We are entering a new flush sequence, so ensure counter is reset.\n\tflush_count = 0;\n\tflush_nested_effects(effect, RENDER_EFFECT, true);\n}\n\n/**\n * Internal version of `flushSync` with the option to not flush previous effects.\n * Returns the result of the passed function, if given.\n * @param {() => any} [fn]\n * @param {boolean} [flush_previous]\n * @returns {any}\n */\nexport function flush_sync(fn, flush_previous = true) {\n\tvar previous_scheduler_mode = current_scheduler_mode;\n\tvar previous_queued_root_effects = current_queued_root_effects;\n\n\ttry {\n\t\tinfinite_loop_guard();\n\n\t\t/** @type {import('./types.js').Effect[]} */\n\t\tconst root_effects = [];\n\n\t\tcurrent_scheduler_mode = FLUSH_SYNC;\n\t\tcurrent_queued_root_effects = root_effects;\n\n\t\tif (flush_previous) {\n\t\t\tflush_queued_root_effects(previous_queued_root_effects);\n\t\t}\n\n\t\tvar result = fn?.();\n\n\t\tif (current_queued_root_effects.length > 0 || root_effects.length > 0) {\n\t\t\tflush_sync();\n\t\t}\n\n\t\tflush_tasks();\n\t\tflush_count = 0;\n\n\t\treturn result;\n\t} finally {\n\t\tcurrent_scheduler_mode = previous_scheduler_mode;\n\t\tcurrent_queued_root_effects = previous_queued_root_effects;\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tawait Promise.resolve();\n\t// By calling flush_sync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflush_sync();\n}\n\n/**\n * @template V\n * @param {import('./types.js').Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\t// @ts-expect-error\n\tif (DEV && signal.inspect && inspect_fn) {\n\t\t/** @type {import('./types.js').ValueDebug} */ (signal).inspect.add(inspect_fn);\n\t\t// @ts-expect-error\n\t\tinspect_captured_signals.push(signal);\n\t}\n\n\tconst flags = signal.f;\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn signal.v;\n\t}\n\n\tif (is_signals_recorded) {\n\t\tcaptured_signals.add(signal);\n\t}\n\n\t// Register the dependency on the current reaction signal.\n\tif (\n\t\tcurrent_reaction !== null &&\n\t\t(current_reaction.f & BRANCH_EFFECT) === 0 &&\n\t\t!current_untracking\n\t) {\n\t\tconst unowned = (current_reaction.f & UNOWNED) !== 0;\n\t\tconst dependencies = current_reaction.deps;\n\t\tif (\n\t\t\tcurrent_dependencies === null &&\n\t\t\tdependencies !== null &&\n\t\t\tdependencies[current_dependencies_index] === signal &&\n\t\t\t!(unowned && current_effect !== null)\n\t\t) {\n\t\t\tcurrent_dependencies_index++;\n\t\t} else if (\n\t\t\tdependencies === null ||\n\t\t\tcurrent_dependencies_index === 0 ||\n\t\t\tdependencies[current_dependencies_index - 1] !== signal\n\t\t) {\n\t\t\tif (current_dependencies === null) {\n\t\t\t\tcurrent_dependencies = [signal];\n\t\t\t} else {\n\t\t\t\tcurrent_dependencies.push(signal);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tcurrent_untracked_writes !== null &&\n\t\t\tcurrent_effect !== null &&\n\t\t\t(current_effect.f & CLEAN) !== 0 &&\n\t\t\t(current_effect.f & BRANCH_EFFECT) === 0 &&\n\t\t\tcurrent_untracked_writes.includes(signal)\n\t\t) {\n\t\t\tset_signal_status(current_effect, DIRTY);\n\t\t\tschedule_effect(current_effect);\n\t\t}\n\t}\n\n\tif (\n\t\t(flags & DERIVED) !== 0 &&\n\t\tcheck_dirtiness(/** @type {import('#client').Derived} */ (signal))\n\t) {\n\t\tif (DEV) {\n\t\t\t// we want to avoid tracking indirect dependencies\n\t\t\tconst previous_inspect_fn = inspect_fn;\n\t\t\tinspect_fn = null;\n\t\t\tupdate_derived(/** @type {import('./types.js').Derived} **/ (signal), false);\n\t\t\tinspect_fn = previous_inspect_fn;\n\t\t} else {\n\t\t\tupdate_derived(/** @type {import('./types.js').Derived} **/ (signal), false);\n\t\t}\n\t}\n\treturn signal.v;\n}\n\n/**\n * Invokes a function and captures all signals that are read during the invocation,\n * then invalidates them.\n * @param {() => any} fn\n */\nexport function invalidate_inner_signals(fn) {\n\tvar previous_is_signals_recorded = is_signals_recorded;\n\tvar previous_captured_signals = captured_signals;\n\tis_signals_recorded = true;\n\tcaptured_signals = new Set();\n\tvar captured = captured_signals;\n\tvar signal;\n\ttry {\n\t\tuntrack(fn);\n\t} finally {\n\t\tis_signals_recorded = previous_is_signals_recorded;\n\t\tif (is_signals_recorded) {\n\t\t\tfor (signal of captured_signals) {\n\t\t\t\tprevious_captured_signals.add(signal);\n\t\t\t}\n\t\t}\n\t\tcaptured_signals = previous_captured_signals;\n\t}\n\tfor (signal of captured) {\n\t\tmutate(signal, null /* doesnt matter */);\n\t}\n}\n\n/**\n * @param {import('#client').Value} signal\n * @param {number} to_status\n * @param {boolean} force_schedule\n * @returns {void}\n */\nexport function mark_reactions(signal, to_status, force_schedule) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\n\t\t// We skip any effects that are already dirty (but not unowned). Additionally, we also\n\t\t// skip if the reaction is the same as the current effect (except if we're not in runes or we\n\t\t// are in force schedule mode).\n\t\tif ((!force_schedule || !runes) && reaction === current_effect) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar flags = reaction.f;\n\t\tset_signal_status(reaction, to_status);\n\n\t\t// If the signal is not clean, then skip over it – with the exception of unowned signals that\n\t\t// are already maybe dirty. Unowned signals might be dirty because they are not captured as part of an\n\t\t// effect.\n\t\tvar maybe_dirty = (flags & MAYBE_DIRTY) !== 0;\n\t\tvar unowned = (flags & UNOWNED) !== 0;\n\n\t\tif ((flags & CLEAN) !== 0 || (maybe_dirty && unowned)) {\n\t\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\t\tmark_reactions(\n\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction),\n\t\t\t\t\tMAYBE_DIRTY,\n\t\t\t\t\tforce_schedule\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tschedule_effect(/** @type {import('#client').Effect} */ (reaction));\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Use `untrack` to prevent something from being treated as an `$effect`/`$derived` dependency.\n *\n * https://svelte-5-preview.vercel.app/docs/functions#untrack\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tconst previous_untracking = current_untracking;\n\ttry {\n\t\tcurrent_untracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tcurrent_untracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {import('./types.js').Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * @template V\n * @param {V | import('./types.js').Value<V>} val\n * @returns {val is import('./types.js').Value<V>}\n */\nexport function is_signal(val) {\n\treturn (\n\t\ttypeof val === 'object' &&\n\t\tval !== null &&\n\t\ttypeof (/** @type {import('./types.js').Value<V>} */ (val).f) === 'number'\n\t);\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map();\n\tconst result = /** @type {T} */ (context_map.get(key));\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\tconst fn = current_component_context?.function;\n\t\tif (fn) {\n\t\t\tadd_owner(result, fn);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map();\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map();\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map();\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\tconst fn = current_component_context?.function;\n\t\tif (fn) {\n\t\t\tfor (const value of context_map.values()) {\n\t\t\t\tadd_owner(value, fn);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn /** @type {T} */ (context_map);\n}\n\n/** @returns {Map<unknown, unknown>} */\nfunction get_or_init_context_map() {\n\tconst component_context = current_component_context;\n\tif (component_context === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_CONTEXT' +\n\t\t\t\t(DEV ? 'Context can only be used during component initialisation.' : '')\n\t\t);\n\t}\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {import('./types.js').ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n\n/**\n * @param {import('./types.js').Value<number>} signal\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update(signal, d = 1) {\n\tconst value = get(signal);\n\tset(signal, value + d);\n\treturn value;\n}\n\n/**\n * @param {import('./types.js').Value<number>} signal\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre(signal, d = 1) {\n\tconst value = get(signal) + d;\n\tset(signal, value);\n\treturn value;\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\tobj = { ...obj };\n\tlet key;\n\tfor (key of keys) {\n\t\tdelete obj[key];\n\t}\n\treturn obj;\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {V} fallback\n * @returns {V}\n */\nexport function value_or_fallback(value, fallback) {\n\treturn value === undefined ? fallback : value;\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tcurrent_component_context = {\n\t\t// exports (and props, if `accessors: true`)\n\t\tx: null,\n\t\t// context\n\t\tc: null,\n\t\t// effects\n\t\te: null,\n\t\t// mounted\n\t\tm: false,\n\t\t// parent\n\t\tp: current_component_context,\n\t\t// signals\n\t\td: null,\n\t\t// props\n\t\ts: props,\n\t\t// runes\n\t\tr: runes,\n\t\t// legacy $:\n\t\tl1: [],\n\t\tl2: source(false),\n\t\t// update_callbacks\n\t\tu: null\n\t};\n\n\tif (DEV) {\n\t\t// component function\n\t\t// @ts-expect-error\n\t\tcurrent_component_context.function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tconst context_stack_item = current_component_context;\n\tif (context_stack_item !== null) {\n\t\tif (component !== undefined) {\n\t\t\tcontext_stack_item.x = component;\n\t\t}\n\t\tconst effects = context_stack_item.e;\n\t\tif (effects !== null) {\n\t\t\tcontext_stack_item.e = null;\n\t\t\tfor (let i = 0; i < effects.length; i++) {\n\t\t\t\teffect(effects[i]);\n\t\t\t}\n\t\t}\n\t\tcurrent_component_context = context_stack_item.p;\n\t\tcontext_stack_item.m = true;\n\t}\n\t// Micro-optimization: Don't set .a above to the empty object\n\t// so it can be garbage-collected when the return here is unused\n\treturn component || /** @type {T} */ ({});\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = Object.getPrototypeOf(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Like `unstate`, but recursively traverses into normal arrays/objects to find potential states in them.\n * @param {any} value\n * @param {Map<any, any>} visited\n * @returns {any}\n */\nfunction deep_unstate(value, visited = new Map()) {\n\tif (typeof value === 'object' && value !== null && !visited.has(value)) {\n\t\tconst unstated = unstate(value);\n\t\tif (unstated !== value) {\n\t\t\tvisited.set(value, unstated);\n\t\t\treturn unstated;\n\t\t}\n\t\tconst prototype = get_prototype_of(value);\n\t\t// Only deeply unstate plain objects and arrays\n\t\tif (prototype === object_prototype || prototype === array_prototype) {\n\t\t\tlet contains_unstated = false;\n\t\t\t/** @type {any} */\n\t\t\tconst nested_unstated = Array.isArray(value) ? [] : {};\n\t\t\tfor (let key in value) {\n\t\t\t\tconst result = deep_unstate(value[key], visited);\n\t\t\t\tnested_unstated[key] = result;\n\t\t\t\tif (result !== value[key]) {\n\t\t\t\t\tcontains_unstated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvisited.set(value, contains_unstated ? nested_unstated : value);\n\t\t} else {\n\t\t\tvisited.set(value, value);\n\t\t}\n\t}\n\n\treturn visited.get(value) ?? value;\n}\n\n// TODO remove in a few versions, before 5.0 at the latest\nlet warned_inspect_changed = false;\n\n/**\n * @param {() => any[]} get_value\n * @param {Function} [inspect]\n */\n// eslint-disable-next-line no-console\nexport function inspect(get_value, inspect = console.log) {\n\tlet initial = true;\n\n\tuser_pre_effect(() => {\n\t\tconst fn = () => {\n\t\t\tconst value = untrack(() => get_value().map((v) => deep_unstate(v)));\n\t\t\tif (value.length === 2 && typeof value[1] === 'function' && !warned_inspect_changed) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'$inspect() API has changed. See https://svelte-5-preview.vercel.app/docs/runes#$inspect for more information.'\n\t\t\t\t);\n\t\t\t\twarned_inspect_changed = true;\n\t\t\t}\n\t\t\tinspect(initial ? 'init' : 'update', ...value);\n\t\t};\n\n\t\tinspect_fn = fn;\n\t\tconst value = get_value();\n\t\tdeep_read(value);\n\t\tinspect_fn = null;\n\n\t\tconst signals = inspect_captured_signals.slice();\n\t\tinspect_captured_signals = [];\n\n\t\tif (initial) {\n\t\t\tfn();\n\t\t\tinitial = false;\n\t\t}\n\n\t\treturn () => {\n\t\t\tfor (const s of signals) {\n\t\t\t\ts.inspect.delete(fn);\n\t\t\t}\n\t\t};\n\t});\n}\n\n/**\n * @template V\n * @param {V | import('#client').Value<V>} value\n * @returns {V}\n */\nexport function unwrap(value) {\n\tif (is_signal(value)) {\n\t\t// @ts-ignore\n\t\treturn get(value);\n\t}\n\t// @ts-ignore\n\treturn value;\n}\n\nif (DEV) {\n\t/**\n\t * @param {string} rune\n\t */\n\tfunction throw_rune_error(rune) {\n\t\tif (!(rune in globalThis)) {\n\t\t\t// TODO if people start adjusting the \"this can contain runes\" config through v-p-s more, adjust this message\n\t\t\t/** @type {any} */\n\t\t\tlet value; // let's hope noone modifies this global, but belts and braces\n\t\t\tObject.defineProperty(globalThis, rune, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: () => {\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`The ${rune} rune is only available inside .svelte and .svelte.js/ts files`\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tset: (v) => {\n\t\t\t\t\tvalue = v;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tthrow_rune_error('$state');\n\tthrow_rune_error('$effect');\n\tthrow_rune_error('$derived');\n\tthrow_rune_error('$inspect');\n\tthrow_rune_error('$props');\n\tthrow_rune_error('$bindable');\n}\n\n/**\n * Expects a value that was wrapped with `freeze` and makes it frozen.\n * @template T\n * @param {T} value\n * @returns {Readonly<T>}\n */\nexport function freeze(value) {\n\tif (typeof value === 'object' && value != null && !is_frozen(value)) {\n\t\t// If the object is already proxified, then unstate the value\n\t\tif (STATE_SYMBOL in value) {\n\t\t\treturn object_freeze(unstate(value));\n\t\t}\n\t\t// Otherwise freeze the object\n\t\tobject_freeze(value);\n\t}\n\treturn value;\n}\n", "import { DEV } from 'esm-env';\nimport { get, batch_inspect, current_component_context, untrack } from './runtime.js';\nimport { effect_active } from './reactivity/effects.js';\nimport {\n\tarray_prototype,\n\tdefine_property,\n\tget_descriptor,\n\tget_descriptors,\n\tget_prototype_of,\n\tis_array,\n\tis_frozen,\n\tobject_prototype\n} from './utils.js';\nimport { add_owner, check_ownership, strip_owner } from './dev/ownership.js';\nimport { mutable_source, source, set } from './reactivity/sources.js';\nimport { STATE_SYMBOL } from './constants.js';\nimport { updating_derived } from './reactivity/deriveds.js';\nimport { UNINITIALIZED } from '../../constants.js';\n\n/**\n * @template T\n * @param {T} value\n * @param {boolean} [immutable]\n * @param {Set<Function> | null} [owners]\n * @returns {import('#client').ProxyStateObject<T> | T}\n */\nexport function proxy(value, immutable = true, owners) {\n\tif (typeof value === 'object' && value != null && !is_frozen(value)) {\n\t\t// If we have an existing proxy, return it...\n\t\tif (STATE_SYMBOL in value) {\n\t\t\tconst metadata = /** @type {import('#client').ProxyMetadata<T>} */ (value[STATE_SYMBOL]);\n\t\t\t// ...unless the proxy belonged to a different object, because\n\t\t\t// someone copied the state symbol using `Reflect.ownKeys(...)`\n\t\t\tif (metadata.t === value || metadata.p === value) {\n\t\t\t\tif (DEV) {\n\t\t\t\t\t// update ownership\n\t\t\t\t\tif (owners) {\n\t\t\t\t\t\tfor (const owner of owners) {\n\t\t\t\t\t\t\tadd_owner(value, owner);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstrip_owner(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn metadata.p;\n\t\t\t}\n\t\t}\n\n\t\tconst prototype = get_prototype_of(value);\n\n\t\tif (prototype === object_prototype || prototype === array_prototype) {\n\t\t\tconst proxy = new Proxy(value, state_proxy_handler);\n\n\t\t\tdefine_property(value, STATE_SYMBOL, {\n\t\t\t\tvalue: /** @type {import('#client').ProxyMetadata} */ ({\n\t\t\t\t\ts: new Map(),\n\t\t\t\t\tv: source(0),\n\t\t\t\t\ta: is_array(value),\n\t\t\t\t\ti: immutable,\n\t\t\t\t\tp: proxy,\n\t\t\t\t\tt: value\n\t\t\t\t}),\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false\n\t\t\t});\n\n\t\t\tif (DEV) {\n\t\t\t\t// set ownership — either of the parent proxy's owners (if provided) or,\n\t\t\t\t// when calling `$.proxy(...)`, to the current component if such there be\n\t\t\t\t// @ts-expect-error\n\t\t\t\tvalue[STATE_SYMBOL].o =\n\t\t\t\t\towners === undefined\n\t\t\t\t\t\t? current_component_context\n\t\t\t\t\t\t\t? // @ts-expect-error\n\t\t\t\t\t\t\t\tnew Set([current_component_context.function])\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t: owners && new Set(owners);\n\t\t\t}\n\n\t\t\treturn proxy;\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {import('#client').ProxyStateObject} T\n * @param {T} value\n * @param {Map<T, Record<string | symbol, any>>} already_unwrapped\n * @returns {Record<string | symbol, any>}\n */\nfunction unwrap(value, already_unwrapped) {\n\tif (typeof value === 'object' && value != null && STATE_SYMBOL in value) {\n\t\tconst unwrapped = already_unwrapped.get(value);\n\t\tif (unwrapped !== undefined) {\n\t\t\treturn unwrapped;\n\t\t}\n\n\t\tif (is_array(value)) {\n\t\t\t/** @type {Record<string | symbol, any>} */\n\t\t\tconst array = [];\n\t\t\talready_unwrapped.set(value, array);\n\t\t\tfor (const element of value) {\n\t\t\t\tarray.push(unwrap(element, already_unwrapped));\n\t\t\t}\n\t\t\treturn array;\n\t\t} else {\n\t\t\t/** @type {Record<string | symbol, any>} */\n\t\t\tconst obj = {};\n\t\t\tconst keys = Reflect.ownKeys(value);\n\t\t\tconst descriptors = get_descriptors(value);\n\t\t\talready_unwrapped.set(value, obj);\n\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key === STATE_SYMBOL) continue;\n\t\t\t\tif (descriptors[key].get) {\n\t\t\t\t\tdefine_property(obj, key, descriptors[key]);\n\t\t\t\t} else {\n\t\t\t\t\t/** @type {T} */\n\t\t\t\t\tconst property = value[key];\n\t\t\t\t\tobj[key] = unwrap(property, already_unwrapped);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @template T\n * @param {T} value\n * @returns {T}\n */\nexport function unstate(value) {\n\treturn /** @type {T} */ (\n\t\tunwrap(/** @type {import('#client').ProxyStateObject} */ (value), new Map())\n\t);\n}\n\n/**\n * @param {import('#client').Source<number>} signal\n * @param {1 | -1} [d]\n */\nfunction update_version(signal, d = 1) {\n\tset(signal, signal.v + d);\n}\n\n/** @type {ProxyHandler<import('#client').ProxyStateObject<any>>} */\nconst state_proxy_handler = {\n\tdefineProperty(target, prop, descriptor) {\n\t\tif (descriptor.value) {\n\t\t\t/** @type {import('#client').ProxyMetadata} */\n\t\t\tconst metadata = target[STATE_SYMBOL];\n\n\t\t\tconst s = metadata.s.get(prop);\n\t\t\tif (s !== undefined) set(s, proxy(descriptor.value, metadata.i, metadata.o));\n\t\t}\n\n\t\treturn Reflect.defineProperty(target, prop, descriptor);\n\t},\n\n\tdeleteProperty(target, prop) {\n\t\t/** @type {import('#client').ProxyMetadata} */\n\t\tconst metadata = target[STATE_SYMBOL];\n\t\tconst s = metadata.s.get(prop);\n\t\tconst is_array = metadata.a;\n\t\tconst boolean = delete target[prop];\n\n\t\t// If we have mutated an array directly, and the deletion\n\t\t// was successful we will also need to update the length\n\t\t// before updating the field or the version. This is to\n\t\t// ensure any effects observing length can execute before\n\t\t// effects that listen to the fields – otherwise they will\n\t\t// operate an an index that no longer exists.\n\t\tif (is_array && boolean) {\n\t\t\tconst ls = metadata.s.get('length');\n\t\t\tconst length = target.length - 1;\n\t\t\tif (ls !== undefined && ls.v !== length) {\n\t\t\t\tset(ls, length);\n\t\t\t}\n\t\t}\n\t\tif (s !== undefined) set(s, UNINITIALIZED);\n\n\t\tif (boolean) {\n\t\t\tupdate_version(metadata.v);\n\t\t}\n\n\t\treturn boolean;\n\t},\n\n\tget(target, prop, receiver) {\n\t\tif (prop === STATE_SYMBOL) {\n\t\t\treturn Reflect.get(target, STATE_SYMBOL);\n\t\t}\n\n\t\t/** @type {import('#client').ProxyMetadata} */\n\t\tconst metadata = target[STATE_SYMBOL];\n\t\tlet s = metadata.s.get(prop);\n\n\t\t// if we're reading a property in a reactive context, create a source,\n\t\t// but only if it's an own property and not a prototype property\n\t\tif (\n\t\t\ts === undefined &&\n\t\t\t(effect_active() || updating_derived) &&\n\t\t\t(!(prop in target) || get_descriptor(target, prop)?.writable)\n\t\t) {\n\t\t\ts = (metadata.i ? source : mutable_source)(proxy(target[prop], metadata.i, metadata.o));\n\t\t\tmetadata.s.set(prop, s);\n\t\t}\n\n\t\tif (s !== undefined) {\n\t\t\tconst value = get(s);\n\t\t\treturn value === UNINITIALIZED ? undefined : value;\n\t\t}\n\n\t\tif (DEV) {\n\t\t\tif (typeof target[prop] === 'function' && prop !== Symbol.iterator) {\n\t\t\t\treturn batch_inspect(target, prop, receiver);\n\t\t\t}\n\t\t}\n\t\treturn Reflect.get(target, prop, receiver);\n\t},\n\n\tgetOwnPropertyDescriptor(target, prop) {\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\t\tif (descriptor && 'value' in descriptor) {\n\t\t\t/** @type {import('#client').ProxyMetadata} */\n\t\t\tconst metadata = target[STATE_SYMBOL];\n\t\t\tconst s = metadata.s.get(prop);\n\n\t\t\tif (s) {\n\t\t\t\tdescriptor.value = get(s);\n\t\t\t}\n\t\t}\n\n\t\treturn descriptor;\n\t},\n\n\thas(target, prop) {\n\t\tif (prop === STATE_SYMBOL) {\n\t\t\treturn true;\n\t\t}\n\t\t/** @type {import('#client').ProxyMetadata} */\n\t\tconst metadata = target[STATE_SYMBOL];\n\t\tconst has = Reflect.has(target, prop);\n\n\t\tlet s = metadata.s.get(prop);\n\t\tif (s !== undefined || (effect_active() && (!has || get_descriptor(target, prop)?.writable))) {\n\t\t\tif (s === undefined) {\n\t\t\t\ts = (metadata.i ? source : mutable_source)(\n\t\t\t\t\thas ? proxy(target[prop], metadata.i, metadata.o) : UNINITIALIZED\n\t\t\t\t);\n\t\t\t\tmetadata.s.set(prop, s);\n\t\t\t}\n\t\t\tconst value = get(s);\n\t\t\tif (value === UNINITIALIZED) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn has;\n\t},\n\n\tset(target, prop, value, receiver) {\n\t\t/** @type {import('#client').ProxyMetadata} */\n\t\tconst metadata = target[STATE_SYMBOL];\n\t\tlet s = metadata.s.get(prop);\n\t\t// If we haven't yet created a source for this property, we need to ensure\n\t\t// we do so otherwise if we read it later, then the write won't be tracked and\n\t\t// the heuristics of effects will be different vs if we had read the proxied\n\t\t// object property before writing to that property.\n\t\tif (s === undefined && effect_active()) {\n\t\t\t// the read creates a signal\n\t\t\tuntrack(() => receiver[prop]);\n\t\t\ts = metadata.s.get(prop);\n\t\t}\n\t\tif (s !== undefined) {\n\t\t\tset(s, proxy(value, metadata.i, metadata.o));\n\t\t}\n\t\tconst is_array = metadata.a;\n\t\tconst not_has = !(prop in target);\n\n\t\tif (DEV) {\n\t\t\t// First check ownership of the object that is assigned to.\n\t\t\t// Then, if the new object has owners, widen them with the ones from the current object.\n\t\t\t// If it doesn't have owners that means it's ownerless, and so the assigned object should be, too.\n\t\t\tif (metadata.o) {\n\t\t\t\tcheck_ownership(metadata.o);\n\t\t\t\tfor (const owner in metadata.o) {\n\t\t\t\t\tadd_owner(value, owner);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstrip_owner(value);\n\t\t\t}\n\t\t}\n\n\t\t// variable.length = value -> clear all signals with index >= value\n\t\tif (is_array && prop === 'length') {\n\t\t\tfor (let i = value; i < target.length; i += 1) {\n\t\t\t\tconst s = metadata.s.get(i + '');\n\t\t\t\tif (s !== undefined) set(s, UNINITIALIZED);\n\t\t\t}\n\t\t}\n\n\t\t// Set the new value before updating any signals so that any listeners get the new value\n\t\t// @ts-ignore\n\t\ttarget[prop] = value;\n\n\t\tif (not_has) {\n\t\t\t// If we have mutated an array directly, we might need to\n\t\t\t// signal that length has also changed. Do it before updating metadata\n\t\t\t// to ensure that iterating over the array as a result of a metadata update\n\t\t\t// will not cause the length to be out of sync.\n\t\t\tif (is_array) {\n\t\t\t\tconst ls = metadata.s.get('length');\n\t\t\t\tconst length = target.length;\n\t\t\t\tif (ls !== undefined && ls.v !== length) {\n\t\t\t\t\tset(ls, length);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate_version(metadata.v);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\townKeys(target) {\n\t\t/** @type {import('#client').ProxyMetadata} */\n\t\tconst metadata = target[STATE_SYMBOL];\n\n\t\tget(metadata.v);\n\t\treturn Reflect.ownKeys(target);\n\t}\n};\n\nif (DEV) {\n\tstate_proxy_handler.setPrototypeOf = () => {\n\t\tthrow new Error('Cannot set prototype of $state object');\n\t};\n}\n", "import { HYDRATION_END, HYDRATION_START } from '../../../constants.js';\n\n/**\n * Use this variable to guard everything related to hydration code so it can be treeshaken out\n * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.\n */\nexport let hydrating = false;\n\n/** @param {boolean} value */\nexport function set_hydrating(value) {\n\thydrating = value;\n}\n\n/**\n * Array of nodes to traverse for hydration. This will be null if we're not hydrating, but for\n * the sake of simplicity we're not going to use `null` checks everywhere and instead rely on\n * the `hydrating` flag to tell whether or not we're in hydration mode at which point this is set.\n * @type {import('#client').TemplateNode[]}\n */\nexport let hydrate_nodes = /** @type {any} */ (null);\n\n/** @param {import('#client').TemplateNode[]} nodes */\nexport function set_hydrate_nodes(nodes) {\n\thydrate_nodes = nodes;\n}\n\n/**\n * This function is only called when `hydrating` is true. If passed a `<!--[-->` opening\n * hydration marker, it finds the corresponding closing marker and sets `hydrate_nodes`\n * to everything between the markers, before returning the closing marker.\n * @param {Node} node\n * @returns {Node}\n */\nexport function hydrate_anchor(node) {\n\tif (node.nodeType !== 8) {\n\t\treturn node;\n\t}\n\n\tvar current = /** @type {Node | null} */ (node);\n\n\t// TODO this could have false positives, if a user comment consisted of `[`. need to tighten that up\n\tif (/** @type {Comment} */ (current)?.data !== HYDRATION_START) {\n\t\treturn node;\n\t}\n\n\t/** @type {Node[]} */\n\tvar nodes = [];\n\tvar depth = 0;\n\n\twhile ((current = /** @type {Node} */ (current).nextSibling) !== null) {\n\t\tif (current.nodeType === 8) {\n\t\t\tvar data = /** @type {Comment} */ (current).data;\n\n\t\t\tif (data === HYDRATION_START) {\n\t\t\t\tdepth += 1;\n\t\t\t} else if (data === HYDRATION_END) {\n\t\t\t\tif (depth === 0) {\n\t\t\t\t\thydrate_nodes = /** @type {import('#client').TemplateNode[]} */ (nodes);\n\t\t\t\t\treturn current;\n\t\t\t\t}\n\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\n\t\tnodes.push(current);\n\t}\n\n\tthrow new Error('Expected a closing hydration marker');\n}\n", "import { hydrate_anchor, hydrate_nodes, hydrating } from './hydration.js';\nimport { get_descriptor } from '../utils.js';\n\n// We cache the Node and Element prototype methods, so that we can avoid doing\n// expensive prototype chain lookups.\n\n/** @type {Node} */\nvar node_prototype;\n\n/** @type {Element} */\nvar element_prototype;\n\n/** @type {Text} */\nvar text_prototype;\n\n/** @type {typeof Node.prototype.appendChild} */\nvar append_child_method;\n\n/** @type {typeof Node.prototype.cloneNode} */\nvar clone_node_method;\n\n/** @type {(this: Node) => ChildNode | null} */\nvar first_child_get;\n\n/** @type {(this: Node) => ChildNode | null} */\nvar next_sibling_get;\n\n/** @type {(this: Node, text: string ) => void} */\nvar text_content_set;\n\n/** @type {(this: Element, class_name: string) => void} */\nvar class_name_set;\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/**\n * @type {Window}\n */\nexport var $window;\n/**\n * @type {Document}\n */\nexport var $document;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif (node_prototype !== undefined) {\n\t\treturn;\n\t}\n\n\tnode_prototype = Node.prototype;\n\telement_prototype = Element.prototype;\n\ttext_prototype = Text.prototype;\n\n\tappend_child_method = node_prototype.appendChild;\n\tclone_node_method = node_prototype.cloneNode;\n\n\t$window = window;\n\t$document = document;\n\n\t// the following assignments improve perf of lookups on DOM nodes\n\t// @ts-expect-error\n\telement_prototype.__click = undefined;\n\t// @ts-expect-error\n\ttext_prototype.__nodeValue = ' ';\n\t// @ts-expect-error\n\telement_prototype.__className = '';\n\t// @ts-expect-error\n\telement_prototype.__attributes = null;\n\n\tfirst_child_get = /** @type {(this: Node) => ChildNode | null} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'firstChild').get\n\t);\n\n\tnext_sibling_get = /** @type {(this: Node) => ChildNode | null} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'nextSibling').get\n\t);\n\n\ttext_content_set = /** @type {(this: Node, text: string ) => void} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'textContent').set\n\t);\n\n\tclass_name_set = /** @type {(this: Element, class_name: string) => void} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(element_prototype, 'className').set\n\t);\n}\n\n/**\n * @template {Element} E\n * @template {Node} T\n * @param {E} element\n * @param {T} child\n */\nexport function append_child(element, child) {\n\tappend_child_method.call(element, child);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @param {boolean} deep\n * @returns {N}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function clone_node(node, deep) {\n\treturn /** @type {N} */ (clone_node_method.call(node, deep));\n}\n\n/** @returns {Text} */\nexport function empty() {\n\treturn document.createTextNode('');\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function child(node) {\n\tconst child = first_child_get.call(node);\n\tif (!hydrating) return child;\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\treturn node.appendChild(empty());\n\t}\n\n\treturn hydrate_anchor(child);\n}\n\n/**\n * @param {DocumentFragment | import('#client').TemplateNode[]} fragment\n * @param {boolean} is_text\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function first_child(fragment, is_text) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\treturn first_child_get.call(/** @type {DocumentFragment} */ (fragment));\n\t}\n\n\t// when we _are_ hydrating, `fragment` is an array of nodes\n\tconst first_node = /** @type {import('#client').TemplateNode[]} */ (fragment)[0];\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && first_node?.nodeType !== 3) {\n\t\tconst text = empty();\n\t\thydrate_nodes.unshift(text);\n\t\tfirst_node?.before(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_anchor(first_node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function sibling(node, is_text = false) {\n\tconst next_sibling = next_sibling_get.call(node);\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && next_sibling?.nodeType !== 3) {\n\t\tconst text = empty();\n\t\tif (next_sibling) {\n\t\t\tconst index = hydrate_nodes.indexOf(/** @type {Text | Comment | Element} */ (next_sibling));\n\t\t\thydrate_nodes.splice(index, 0, text);\n\t\t\tnext_sibling.before(text);\n\t\t} else {\n\t\t\thydrate_nodes.push(text);\n\t\t}\n\n\t\treturn text;\n\t}\n\n\treturn hydrate_anchor(/** @type {Node} */ (next_sibling));\n}\n\n/**\n * @template {Element} N\n * @param {N} node\n * @param {string} class_name\n * @returns {void}\n */\nexport function set_class_name(node, class_name) {\n\tclass_name_set.call(node, class_name);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\ttext_content_set.call(node, '');\n}\n\n/** @param {string} name */\n/*#__NO_SIDE_EFFECTS__*/\nexport function create_element(name) {\n\treturn document.createElement(name);\n}\n", "import { render_effect } from '../../reactivity/effects.js';\nimport { all_registered_events, root_event_handles } from '../../render.js';\nimport { define_property, is_array } from '../../utils.js';\n\n/**\n * @param {string} event_name\n * @param {Element} dom\n * @param {EventListener} handler\n * @param {boolean} capture\n * @param {boolean} [passive]\n * @returns {void}\n */\nexport function event(event_name, dom, handler, capture, passive) {\n\tvar options = { capture, passive };\n\n\t/**\n\t * @this {EventTarget}\n\t */\n\tfunction target_handler(/** @type {Event} */ event) {\n\t\tif (!capture) {\n\t\t\t// Only call in the bubble phase, else delegated events would be called before the capturing events\n\t\t\thandle_event_propagation(dom, event);\n\t\t}\n\t\tif (!event.cancelBubble) {\n\t\t\treturn handler.call(this, event);\n\t\t}\n\t}\n\n\tdom.addEventListener(event_name, target_handler, options);\n\n\t// @ts-ignore\n\tif (dom === document.body || dom === window || dom === document) {\n\t\trender_effect(() => {\n\t\t\treturn () => {\n\t\t\t\tdom.removeEventListener(event_name, target_handler, options);\n\t\t\t};\n\t\t});\n\t}\n}\n\n/**\n * @param {Array<string>} events\n * @returns {void}\n */\nexport function delegate(events) {\n\tfor (var i = 0; i < events.length; i++) {\n\t\tall_registered_events.add(events[i]);\n\t}\n\n\tfor (var fn of root_event_handles) {\n\t\tfn(events);\n\t}\n}\n\n/**\n * @param {Node} handler_element\n * @param {Event} event\n * @returns {void}\n */\nexport function handle_event_propagation(handler_element, event) {\n\tvar owner_document = handler_element.ownerDocument;\n\tvar event_name = event.type;\n\tvar path = event.composedPath?.() || [];\n\tvar current_target = /** @type {null | Element} */ (path[0] || event.target);\n\n\tif (event.target !== current_target) {\n\t\tdefine_property(event, 'target', {\n\t\t\tconfigurable: true,\n\t\t\tvalue: current_target\n\t\t});\n\t}\n\n\t// composedPath contains list of nodes the event has propagated through.\n\t// We check __root to skip all nodes below it in case this is a\n\t// parent of the __root node, which indicates that there's nested\n\t// mounted apps. In this case we don't want to trigger events multiple times.\n\tvar path_idx = 0;\n\n\t// @ts-expect-error is added below\n\tvar handled_at = event.__root;\n\n\tif (handled_at) {\n\t\tvar at_idx = path.indexOf(handled_at);\n\t\tif (\n\t\t\tat_idx !== -1 &&\n\t\t\t(handler_element === document || handler_element === /** @type {any} */ (window))\n\t\t) {\n\t\t\t// This is the fallback document listener or a window listener, but the event was already handled\n\t\t\t// -> ignore, but set handle_at to document/window so that we're resetting the event\n\t\t\t// chain in case someone manually dispatches the same event object again.\n\t\t\t// @ts-expect-error\n\t\t\tevent.__root = handler_element;\n\t\t\treturn;\n\t\t}\n\n\t\t// We're deliberately not skipping if the index is higher, because\n\t\t// someone could create an event programmatically and emit it multiple times,\n\t\t// in which case we want to handle the whole propagation chain properly each time.\n\t\t// (this will only be a false negative if the event is dispatched multiple times and\n\t\t// the fallback document listener isn't reached in between, but that's super rare)\n\t\tvar handler_idx = path.indexOf(handler_element);\n\t\tif (handler_idx === -1) {\n\t\t\t// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)\n\t\t\t// so guard against that, too, and assume that everything was handled at this point.\n\t\t\treturn;\n\t\t}\n\n\t\tif (at_idx <= handler_idx) {\n\t\t\t// +1 because at_idx is the element which was already handled, and there can only be one delegated event per element.\n\t\t\t// Avoids on:click and onclick on the same event resulting in onclick being fired twice.\n\t\t\tpath_idx = at_idx + 1;\n\t\t}\n\t}\n\n\tcurrent_target = /** @type {Element} */ (path[path_idx] || event.target);\n\n\t// Proxy currentTarget to correct target\n\tdefine_property(event, 'currentTarget', {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn current_target || owner_document;\n\t\t}\n\t});\n\n\twhile (current_target !== null) {\n\t\t/** @type {null | Element} */\n\t\tvar parent_element =\n\t\t\tcurrent_target.parentNode || /** @type {any} */ (current_target).host || null;\n\t\tvar internal_prop_name = '__' + event_name;\n\t\t// @ts-ignore\n\t\tvar delegated = current_target[internal_prop_name];\n\n\t\tif (delegated !== undefined && !(/** @type {any} */ (current_target).disabled)) {\n\t\t\tif (is_array(delegated)) {\n\t\t\t\tvar [fn, ...data] = delegated;\n\t\t\t\tfn.apply(current_target, [event, ...data]);\n\t\t\t} else {\n\t\t\t\tdelegated.call(current_target, event);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tevent.cancelBubble ||\n\t\t\tparent_element === handler_element ||\n\t\t\tcurrent_target === handler_element\n\t\t) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrent_target = parent_element;\n\t}\n\n\t// @ts-expect-error is used above\n\tevent.__root = handler_element;\n\t// @ts-expect-error is used above\n\tcurrent_target = handler_element;\n}\n", "import { DEV } from 'esm-env';\nimport {\n\tappend_child,\n\tclear_text_content,\n\tcreate_element,\n\tempty,\n\tinit_operations\n} from './dom/operations.js';\nimport { HYDRATION_START, PassiveDelegatedEvents } from '../../constants.js';\nimport { flush_sync, push, pop, current_component_context, untrack } from './runtime.js';\nimport { effect_root, branch } from './reactivity/effects.js';\nimport {\n\thydrate_anchor,\n\thydrate_nodes,\n\thydrating,\n\tset_hydrate_nodes,\n\tset_hydrating\n} from './dom/hydration.js';\nimport { array_from } from './utils.js';\nimport { handle_event_propagation } from './dom/elements/events.js';\n\n/** @type {Set<string>} */\nexport const all_registered_events = new Set();\n\n/** @type {Set<(events: Array<string>) => void>} */\nexport const root_event_handles = new Set();\n\n/**\n * This is normally true — block effects should run their intro transitions —\n * but is false during hydration and mounting (unless `options.intro` is `true`)\n * and when creating the children of a `<svelte:element>` that just changed tag\n */\nexport let should_intro = true;\n\n/** @param {boolean} value */\nexport function set_should_intro(value) {\n\tshould_intro = value;\n}\n\n/**\n * @param {Element} dom\n * @param {string} value\n * @returns {void}\n */\nexport function set_text(dom, value) {\n\t// @ts-expect-error need to add __value to patched prototype\n\tconst prev_node_value = dom.__nodeValue;\n\tconst next_node_value = stringify(value);\n\tif (hydrating && dom.nodeValue === next_node_value) {\n\t\t// In case of hydration don't reset the nodeValue as it's already correct.\n\t\t// @ts-expect-error need to add __nodeValue to patched prototype\n\t\tdom.__nodeValue = next_node_value;\n\t} else if (prev_node_value !== next_node_value) {\n\t\tdom.nodeValue = next_node_value;\n\t\t// @ts-expect-error need to add __className to patched prototype\n\t\tdom.__nodeValue = next_node_value;\n\t}\n}\n\n/**\n * @param {Comment} anchor\n * @param {void | ((anchor: Comment, slot_props: Record<string, unknown>) => void)} slot_fn\n * @param {Record<string, unknown>} slot_props\n * @param {null | ((anchor: Comment) => void)} fallback_fn\n */\nexport function slot(anchor, slot_fn, slot_props, fallback_fn) {\n\tif (slot_fn === undefined) {\n\t\tif (fallback_fn !== null) {\n\t\t\tfallback_fn(anchor);\n\t\t}\n\t} else {\n\t\tslot_fn(anchor, slot_props);\n\t}\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nexport function stringify(value) {\n\treturn typeof value === 'string' ? value : value == null ? '' : value + '';\n}\n\n/**\n * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t}} options\n * @returns {Exports}\n */\nexport function mount(component, options) {\n\tconst anchor = options.target.appendChild(empty());\n\t// Don't flush previous effects to ensure order of outer effects stays consistent\n\treturn flush_sync(() => _mount(component, { ...options, anchor }), false);\n}\n\n/**\n * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t\trecover?: false;\n * \t}} options\n * @returns {Exports}\n */\nexport function hydrate(component, options) {\n\tconst target = options.target;\n\tconst previous_hydrate_nodes = hydrate_nodes;\n\n\tlet hydrated = false;\n\n\ttry {\n\t\t// Don't flush previous effects to ensure order of outer effects stays consistent\n\t\treturn flush_sync(() => {\n\t\t\tset_hydrating(true);\n\n\t\t\tvar node = target.firstChild;\n\t\t\twhile (\n\t\t\t\tnode &&\n\t\t\t\t(node.nodeType !== 8 || /** @type {Comment} */ (node).data !== HYDRATION_START)\n\t\t\t) {\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tif (!node) {\n\t\t\t\tthrow new Error('Missing hydration marker');\n\t\t\t}\n\n\t\t\tconst anchor = hydrate_anchor(node);\n\t\t\tconst instance = _mount(component, { ...options, anchor });\n\n\t\t\t// flush_sync will run this callback and then synchronously run any pending effects,\n\t\t\t// which don't belong to the hydration phase anymore - therefore reset it here\n\t\t\tset_hydrating(false);\n\t\t\thydrated = true;\n\n\t\t\treturn instance;\n\t\t}, false);\n\t} catch (error) {\n\t\tif (!hydrated && options.recover !== false) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(\n\t\t\t\t'ERR_SVELTE_HYDRATION_MISMATCH' +\n\t\t\t\t\t(DEV\n\t\t\t\t\t\t? ': Hydration failed because the initial UI does not match what was rendered on the server.'\n\t\t\t\t\t\t: ''),\n\t\t\t\terror\n\t\t\t);\n\n\t\t\tclear_text_content(target);\n\n\t\t\tset_hydrating(false);\n\t\t\treturn mount(component, options);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t} finally {\n\t\tset_hydrating(!!previous_hydrate_nodes);\n\t\tset_hydrate_nodes(previous_hydrate_nodes);\n\t}\n}\n\n/**\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} Component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tanchor: Node;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t}} options\n * @returns {Exports}\n */\nfunction _mount(\n\tComponent,\n\t{ target, anchor, props = /** @type {Props} */ ({}), events, context, intro = false }\n) {\n\tinit_operations();\n\n\tconst registered_events = new Set();\n\n\tconst bound_event_listener = handle_event_propagation.bind(null, target);\n\tconst bound_document_event_listener = handle_event_propagation.bind(null, document);\n\n\t/** @param {Array<string>} events */\n\tconst event_handle = (events) => {\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tconst event_name = events[i];\n\t\t\tif (!registered_events.has(event_name)) {\n\t\t\t\tregistered_events.add(event_name);\n\t\t\t\t// Add the event listener to both the container and the document.\n\t\t\t\t// The container listener ensures we catch events from within in case\n\t\t\t\t// the outer content stops propagation of the event.\n\t\t\t\ttarget.addEventListener(\n\t\t\t\t\tevent_name,\n\t\t\t\t\tbound_event_listener,\n\t\t\t\t\tPassiveDelegatedEvents.includes(event_name)\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tpassive: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined\n\t\t\t\t);\n\t\t\t\t// The document listener ensures we catch events that originate from elements that were\n\t\t\t\t// manually moved outside of the container (e.g. via manual portals).\n\t\t\t\tdocument.addEventListener(\n\t\t\t\t\tevent_name,\n\t\t\t\t\tbound_document_event_listener,\n\t\t\t\t\tPassiveDelegatedEvents.includes(event_name)\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tpassive: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tevent_handle(array_from(all_registered_events));\n\troot_event_handles.add(event_handle);\n\n\t/** @type {Exports} */\n\t// @ts-expect-error will be defined because the render effect runs synchronously\n\tlet component = undefined;\n\n\tconst unmount = effect_root(() => {\n\t\tbranch(() => {\n\t\t\tuntrack(() => {\n\t\t\t\tif (context) {\n\t\t\t\t\tpush({});\n\t\t\t\t\tvar ctx = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\t\t\t\t\tctx.c = context;\n\t\t\t\t}\n\n\t\t\t\tif (events) {\n\t\t\t\t\t// We can't spread the object or else we'd lose the state proxy stuff, if it is one\n\t\t\t\t\t/** @type {any} */ (props).$$events = events;\n\t\t\t\t}\n\n\t\t\t\tshould_intro = intro;\n\t\t\t\t// @ts-expect-error the public typings are not what the actual function looks like\n\t\t\t\tcomponent = Component(anchor, props) || {};\n\t\t\t\tshould_intro = true;\n\n\t\t\t\tif (context) {\n\t\t\t\t\tpop();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn () => {\n\t\t\tfor (const event_name of registered_events) {\n\t\t\t\ttarget.removeEventListener(event_name, bound_event_listener);\n\t\t\t}\n\t\t\troot_event_handles.delete(event_handle);\n\t\t};\n\t});\n\n\tmounted_components.set(component, unmount);\n\treturn component;\n}\n\n/**\n * References of the components that were mounted or hydrated.\n * Uses a `WeakMap` to avoid memory leaks.\n */\nlet mounted_components = new WeakMap();\n\n/**\n * Unmounts a component that was previously mounted using `mount` or `hydrate`.\n * @param {Record<string, any>} component\n */\nexport function unmount(component) {\n\tconst fn = mounted_components.get(component);\n\tif (DEV && !fn) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn('Tried to unmount a component that was not mounted.');\n\t}\n\tfn?.();\n}\n\n/**\n * @param {Record<string, any>} props\n * @returns {Record<string, any>}\n */\nexport function sanitize_slots(props) {\n\tconst sanitized = { ...props.$$slots };\n\tif (props.children) sanitized.default = props.children;\n\treturn sanitized;\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n */\nexport async function append_styles(target, style_sheet_id, styles) {\n\t// Wait a tick so that the template is added to the dom, else getRootNode() will yield wrong results\n\t// If it turns out that this results in noticeable flickering, we need to do something like doing the\n\t// append outside and adding code in mount that appends all stylesheets (similar to how we do it with event delegation)\n\tawait Promise.resolve();\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = create_element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_child(/** @type {Document} */ (append_styles_to).head || append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n */\nfunction get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn /** @type {Document} */ (node.ownerDocument);\n}\n", "import { proxy } from '../internal/client/proxy.js';\nimport { hydrate, mount, unmount } from '../internal/client/render.js';\nimport { define_property } from '../internal/client/utils.js';\n\n/**\n * Takes the same options as a Svelte 4 component and the component function and returns a Svelte 4 compatible component.\n *\n * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @template {Record<string, any>} Slots\n *\n * @param {import('svelte').ComponentConstructorOptions<Props> & {\n * \tcomponent: import('svelte').ComponentType<import('svelte').SvelteComponent<Props, Events, Slots>>;\n * \timmutable?: boolean;\n * \thydrate?: boolean;\n * \trecover?: boolean;\n * }} options\n * @returns {import('svelte').SvelteComponent<Props, Events, Slots> & Exports}\n */\nexport function createClassComponent(options) {\n\t// @ts-expect-error $$prop_def etc are not actually defined\n\treturn new Svelte4Component(options);\n}\n\n/**\n * Takes the component function and returns a Svelte 4 compatible component constructor.\n *\n * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @template {Record<string, any>} Slots\n *\n * @param {import('svelte').SvelteComponent<Props, Events, Slots>} component\n * @returns {import('svelte').ComponentType<import('svelte').SvelteComponent<Props, Events, Slots> & Exports>}\n */\nexport function asClassComponent(component) {\n\t// @ts-expect-error $$prop_def etc are not actually defined\n\treturn class extends Svelte4Component {\n\t\t/** @param {any} options */\n\t\tconstructor(options) {\n\t\t\tsuper({\n\t\t\t\tcomponent,\n\t\t\t\t...options\n\t\t\t});\n\t\t}\n\t};\n}\n\nclass Svelte4Component {\n\t/** @type {any} */\n\t#events = {};\n\n\t/** @type {Record<string, any>} */\n\t#instance;\n\n\t/**\n\t * @param {import('svelte').ComponentConstructorOptions & {\n\t *  component: any;\n\t * \timmutable?: boolean;\n\t * \thydrate?: boolean;\n\t * \trecover?: false;\n\t * }} options\n\t */\n\tconstructor(options) {\n\t\t// Using proxy state here isn't completely mirroring the Svelte 4 behavior, because mutations to a property\n\t\t// cause fine-grained updates to only the places where that property is used, and not the entire property.\n\t\t// Reactive statements and actions (the things where this matters) are handling this properly regardless, so it should be fine in practise.\n\t\tconst props = proxy({ ...(options.props || {}), $$events: this.#events }, false);\n\t\tthis.#instance = (options.hydrate ? hydrate : mount)(options.component, {\n\t\t\ttarget: options.target,\n\t\t\tprops,\n\t\t\tcontext: options.context,\n\t\t\tintro: options.intro,\n\t\t\trecover: options.recover\n\t\t});\n\n\t\tfor (const key of Object.keys(this.#instance)) {\n\t\t\tif (key === '$set' || key === '$destroy' || key === '$on') continue;\n\t\t\tdefine_property(this, key, {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.#instance[key];\n\t\t\t\t},\n\t\t\t\t/** @param {any} value */\n\t\t\t\tset(value) {\n\t\t\t\t\tthis.#instance[key] = value;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t});\n\t\t}\n\n\t\tthis.#instance.$set = /** @param {Record<string, any>} next */ (next) => {\n\t\t\tObject.assign(props, next);\n\t\t};\n\t\tthis.#instance.$destroy = () => {\n\t\t\tunmount(this.#instance);\n\t\t};\n\t}\n\n\t/** @param {Record<string, any>} props */\n\t$set(props) {\n\t\tthis.#instance.$set(props);\n\t}\n\n\t/**\n\t * @param {string} event\n\t * @param {(...args: any[]) => any} callback\n\t * @returns {any}\n\t */\n\t$on(event, callback) {\n\t\tthis.#events[event] = this.#events[event] || [];\n\n\t\t/** @param {any[]} args */\n\t\tconst cb = (...args) => callback.call(this, ...args);\n\t\tthis.#events[event].push(cb);\n\t\treturn () => {\n\t\t\tthis.#events[event] = this.#events[event].filter(/** @param {any} fn */ (fn) => fn !== cb);\n\t\t};\n\t}\n\n\t$destroy() {\n\t\tthis.#instance.$destroy();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAEO,IAAI,WAAW,MAAM;AACrB,IAAI,aAAa,MAAM;AACvB,IAAI,cAAc,OAAO;AAEzB,IAAI,YAAY,OAAO;AAEvB,IAAI,kBAAkB,OAAO;AAC7B,IAAI,iBAAiB,OAAO;AAC5B,IAAI,kBAAkB,OAAO;AAC7B,IAAI,mBAAmB,OAAO;AAC9B,IAAI,kBAAkB,MAAM;AAC5B,IAAI,mBAAmB,OAAO;AAGrC,IAAI,gBAAgB,IAAI;AACxB,IAAI,iBAAiB,cAAc;AACnC,IAAI,iBAAiB,cAAc;;;AClB5B,IAAM,UAAU,KAAK;AACrB,IAAM,SAAS,KAAK;AACpB,IAAM,gBAAgB,KAAK;AAC3B,IAAM,eAAe,KAAK;AAC1B,IAAM,gBAAgB,KAAK;AAC3B,IAAM,cAAc,KAAK;AACzB,IAAM,UAAU,KAAK;AACrB,IAAM,QAAQ,KAAK;AACnB,IAAM,QAAQ,KAAK;AACnB,IAAM,cAAc,KAAK;AACzB,IAAM,QAAQ,KAAK;AACnB,IAAM,YAAY,KAAK;AACvB,IAAM,YAAY,KAAK;AACvB,IAAM,aAAa,KAAK;AAExB,IAAM,eAAe,OAAO,QAAQ;;;ACdpC,SAAS,OAAO,OAAO;AAC7B,SAAO,UAAU,KAAK;AACvB;AAOO,SAAS,eAAe,GAAG,GAAG;AAEpC,SAAO,KAAK;AAAA;AAAA,IAEV,KAAK;AAAA,MACJ,MAAM,KAAM,MAAM,QAAQ,OAAO,MAAM,YAAa,OAAO,MAAM;AACrE;AAGO,SAAS,YAAY,OAAO;AAClC,SAAO,CAAC,eAAe,OAAO,KAAK,CAAC;AACrC;;;ACOO,SAAS,OAAO,OAAO;AAE7B,QAAMA,UAAS;AAAA,IACd,GAAG;AAAA;AAAA,IACH,WAAW;AAAA,IACX;AAAA,IACA,GAAG;AAAA,IACH,SAAS;AAAA,EACV;AAEA,MAAI,KAAK;AACuC,IAACA,QAAQ,UAAU,oBAAI,IAAI;AAAA,EAC3E;AAEA,SAAOA;AACR;AAQO,SAAS,eAAe,eAAe;AAnD9C;AAoDC,QAAM,IAAI,OAAO,aAAa;AAC9B,IAAE,SAAS;AAIX,MAAI,2BAA2B;AAC9B,MAAC,gCAA0B,MAA1B,GAA0B,IAAM,CAAC,IAAG,KAAK,CAAC;AAAA,EAC5C;AAEA,SAAO;AACR;AAqBO,SAAS,IAAI,QAAQ,OAAO;AAClC,MAAI,cAAc,OAAO,MAAM;AAE/B,MACC,CAAC,sBACD,eACA,qBAAqB,QACrB,SAAS,MACR,iBAAiB,IAAI,aAAa,GAClC;AACD,UAAM,IAAI;AAAA,MACT,gCACE,MACE;AAAA;AAAA,mGAGA;AAAA,IACL;AAAA,EACD;AAEA,MAAI,CAAC,OAAO,OAAO,KAAK,GAAG;AAC1B,WAAO,IAAI;AAGX,WAAO;AAWP,QACC,SAAS,KACT,eACA,mBAAmB,SAClB,eAAe,IAAI,WAAW,MAC9B,eAAe,IAAI,mBAAmB,GACtC;AACD,UAAI,yBAAyB,QAAQ,qBAAqB,SAAS,MAAM,GAAG;AAC3E,0BAAkB,gBAAgB,KAAK;AACvC,wBAAgB,cAAc;AAAA,MAC/B,OAAO;AACN,YAAI,6BAA6B,MAAM;AACtC,uCAA6B,CAAC,MAAM,CAAC;AAAA,QACtC,OAAO;AACN,mCAAyB,KAAK,MAAM;AAAA,QACrC;AAAA,MACD;AAAA,IACD;AAEA,mBAAe,QAAQ,OAAO,IAAI;AAElC,QAAI,KAAK;AACR,UAAI,oBAAoB;AACvB;AAAA;AAAA,UAAuE;AAAA,QAAO;AAAA,MAC/E,OAAO;AACN;AAAA,gBAAW;AAAA;AAAA,UAAmD,OAAQ;AAAA;AAAS,aAAG;AAAA,MACnF;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;;;AClJO,SAAS,0BAA0B,MAAM;AAC/C,MAAI,OAAO,SAAS,cAAc,UAAU;AAC5C,OAAK,YAAY;AACjB,SAAO,KAAK;AACb;AAKO,SAAS,OAAO,SAAS;AAC/B,MAAI,SAAS,OAAO,GAAG;AACtB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,UAAI,OAAO,QAAQ,CAAC;AACpB,UAAI,KAAK,aAAa;AACrB,aAAK,OAAO;AAAA,MACb;AAAA,IACD;AAAA,EACD,WAAW,QAAQ,aAAa;AAC/B,YAAQ,OAAO;AAAA,EAChB;AACD;;;ACaO,SAAS,YAAYC,SAAQ,eAAe;AAClD,MAAI,cAAc,cAAc;AAChC,MAAI,gBAAgB,MAAM;AACzB,kBAAc,OAAO,cAAc,QAAQA;AAAA,EAC5C,OAAO;AACN,gBAAY,OAAOA;AACnB,IAAAA,QAAO,OAAO;AACd,kBAAc,OAAOA;AAAA,EACtB;AACD;AAQA,SAAS,cAAc,MAAM,IAAI,MAAM;AACtC,MAAI,WAAW,OAAO,iBAAiB;AAEvC,MAAIA,UAAS;AAAA,IACZ,KAAK;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,GAAG,OAAO;AAAA,IACV,OAAO;AAAA,IACP;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,UAAU,OAAO;AAAA,IACzB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,EACd;AAEA,MAAI,qBAAqB,QAAQ,CAAC,SAAS;AAC1C,gBAAYA,SAAQ,gBAAgB;AAAA,EACrC;AAEA,MAAI,MAAM;AACT,QAAI,6BAA6B;AAEjC,QAAI;AACH,6BAAuB,IAAI;AAC3B,qBAAeA,OAAM;AACrB,MAAAA,QAAO,KAAK;AAAA,IACb,UAAE;AACD,6BAAuB,0BAA0B;AAAA,IAClD;AAAA,EACD,OAAO;AACN,oBAAgBA,OAAM;AAAA,EACvB;AAEA,SAAOA;AACR;AAMO,SAAS,gBAAgB;AAC/B,SAAO,kBAAkB,eAAe,KAAK,gBAAgB,kBAAkB,IAAI;AACpF;AAMO,SAAS,YAAY,IAAI;AAC/B,MAAI,mBAAmB,MAAM;AAC5B,UAAM,IAAI;AAAA,MACT,8BACE,MAAM,gFAAgF;AAAA,IACzF;AAAA,EACD;AAIA,QAAM,QACL,eAAe,IAAI;AAAA,EAEnB,8BAA8B,QAC9B,CAAC,0BAA0B;AAE5B,MAAI,OAAO;AACV,UAAM;AAAA;AAAA,MAA6D;AAAA;AACnE,KAAC,QAAQ,MAAR,QAAQ,IAAM,CAAC,IAAG,KAAK,EAAE;AAAA,EAC3B,OAAO;AACN,WAAO,EAAE;AAAA,EACV;AACD;AAyBO,SAAS,YAAY,IAAI;AAG/B,QAAMC,UAAS,cAAc,aAAa,MAAM,QAAQ,EAAE,GAAG,IAAI;AACjE,SAAO,MAAM;AACZ,mBAAeA,OAAM;AAAA,EACtB;AACD;AAMO,SAAS,OAAO,IAAI;AAC1B,SAAO,cAAc,QAAQ,IAAI,KAAK;AACvC;AAoDO,SAAS,cAAc,IAAI;AACjC,SAAO,cAAc,eAAe,IAAI,IAAI;AAC7C;AAQO,SAAS,OAAO,IAAI;AAC1B,SAAO,cAAc,gBAAgB,eAAe,IAAI,IAAI;AAC7D;AAMO,SAAS,eAAeC,SAAQ;AA5OvC;AA6OC,0BAAwBA,OAAM;AAC9B,mBAAiBA,SAAQ,CAAC;AAC1B,oBAAkBA,SAAQ,SAAS;AAEnC,MAAIA,QAAO,aAAa;AACvB,eAAW,cAAcA,QAAO,aAAa;AAC5C,iBAAW,KAAK;AAAA,IACjB;AAAA,EACD;AAEA,QAAAA,QAAO,aAAP,wBAAAA;AAEA,MAAIA,QAAO,QAAQ,MAAM;AACxB,WAAOA,QAAO,GAAG;AAAA,EAClB;AAEA,MAAI,SAASA,QAAO;AAGpB,MAAI,WAAW,SAASA,QAAO,IAAI,mBAAmB,KAAK,OAAO,UAAU,MAAM;AACjF,QAAI,WAAWA,QAAO;AACtB,QAAI,OAAOA,QAAO;AAClB,QAAI,aAAa,MAAM;AACtB,UAAI,SAAS,MAAM;AAClB,iBAAS,OAAO;AAChB,aAAK,OAAO;AAAA,MACb,OAAO;AACN,iBAAS,OAAO;AAChB,eAAO,OAAO;AAAA,MACf;AAAA,IACD,WAAW,SAAS,MAAM;AACzB,WAAK,OAAO;AACZ,aAAO,QAAQ;AAAA,IAChB,OAAO;AACN,aAAO,QAAQ;AACf,aAAO,OAAO;AAAA,IACf;AAAA,EACD;AAEA,EAAAA,QAAO,QACNA,QAAO,OACPA,QAAO,OACPA,QAAO,OACPA,QAAO,WACPA,QAAO,MACPA,QAAO,MACPA,QAAO,OACPA,QAAO;AAAA,EAEPA,QAAO,KACN;AACH;;;AC9RA,IAAI,iBAAiB;AACrB,IAAI,gBAAgB;AAGpB,IAAI,uBAAuB,CAAC;AAE5B,IAAI,oBAAoB,CAAC;AAEzB,SAAS,eAAe;AACvB,mBAAiB;AACjB,QAAM,QAAQ,qBAAqB,MAAM;AACzC,yBAAuB,CAAC;AACxB,UAAQ,KAAK;AACd;AAEA,SAAS,mBAAmB;AAC3B,kBAAgB;AAChB,QAAM,QAAQ,kBAAkB,MAAM;AACtC,sBAAoB,CAAC;AACrB,UAAQ,KAAK;AACd;AAKO,SAAS,cAAc;AAC7B,MAAI,gBAAgB;AACnB,iBAAa;AAAA,EACd;AACA,MAAI,eAAe;AAClB,qBAAiB;AAAA,EAClB;AACD;;;AC5BA,IAAM,aAAa,CAAC;AAEpB,IAAM,iBAAiB;AACvB,IAAM,kBAAkB;AAExB,SAAS,YAAY;AACpB,QAAM,QAAQ,IAAI,MAAM,EAAE;AAC1B,MAAI,CAAC;AAAO,WAAO;AAEnB,QAAM,UAAU,CAAC;AAEjB,aAAW,QAAQ,MAAM,MAAM,IAAI,GAAG;AACrC,QAAI,QAAQ,eAAe,KAAK,IAAI,KAAK,gBAAgB,KAAK,IAAI;AAElE,QAAI,OAAO;AACV,cAAQ,KAAK;AAAA,QACZ,MAAM,MAAM,CAAC;AAAA,QACb,MAAM,CAAC,MAAM,CAAC;AAAA,QACd,QAAQ,CAAC,MAAM,CAAC;AAAA,MACjB,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;AAMA,SAAS,gBAAgB;AApCzB;AAsCC,QAAM,SAAQ,eAAU,MAAV,mBAAa,MAAM;AACjC,MAAI,CAAC;AAAO,WAAO;AAEnB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAM,QAAQ,MAAM,CAAC;AACrB,UAAM,UAAU,WAAW,MAAM,IAAI;AACrC,QAAI,CAAC,SAAS;AAOb,UAAI,MAAM;AAAG,eAAO;AACpB;AAAA,IACD;AAEA,eAAW,UAAU,SAAS;AAC7B,UAAI,OAAO,MAAM,OAAO,MAAM,QAAQ,OAAO,IAAI,OAAO,MAAM,MAAM;AACnE,eAAO,OAAO;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAmCO,SAAS,UAAU,QAAQ,OAAO;AACxC,UAAQ,MAAM;AACb,wBAAoB,QAAQ,KAAK;AAAA,EAClC,CAAC;AACF;AAMA,SAAS,oBAAoB,QAAQ,OAAO;AA5G5C;AA6GC,QAAI,sCAAS,kBAAT,mBAAwB,MAAK,CAAC,OAAO,YAAY,EAAE,EAAE,IAAI,KAAK,GAAG;AACpE,WAAO,YAAY,EAAE,EAAE,IAAI,KAAK;AAEhC,eAAW,OAAO,QAAQ;AACzB,0BAAoB,OAAO,GAAG,GAAG,KAAK;AAAA,IACvC;AAAA,EACD;AACD;AAKO,SAAS,YAAY,QAAQ;AACnC,UAAQ,MAAM;AACb,4BAAwB,MAAM;AAAA,EAC/B,CAAC;AACF;AAKA,SAAS,wBAAwB,QAAQ;AAlIzC;AAmIC,OAAI,sCAAS,kBAAT,mBAAwB,GAAG;AAC9B,WAAO,YAAY,EAAE,IAAI;AAEzB,eAAW,OAAO,QAAQ;AACzB,kBAAY,OAAO,GAAG,CAAC;AAAA,IACxB;AAAA,EACD;AACD;AAKO,SAAS,gBAAgB,QAAQ;AACvC,QAAM,YAAY,cAAc;AAEhC,MAAI,aAAa,CAAC,OAAO,IAAI,SAAS,GAAG;AACxC,QAAI,WAAW,CAAC,GAAG,MAAM,EAAE,CAAC;AAE5B,QAAI;AAAA;AAAA,MAEH,SAAS,aAAa,UAAU;AAAA;AAAA,QAE9B,GAAG,UAAU,QAAQ,6BAA6B,SAAS,QAAQ;AAAA,UAClE;AAAA;AAGJ,YAAQ;AAAA,MACP,GAAG,OAAO;AAAA,IACX;AAGA,YAAQ,MAAM;AAAA,EACf;AACD;;;ACtJO,IAAI,mBAAmB;AA0D9B,SAAS,yBAAyB,QAAQ;AACzC,0BAAwB,MAAM;AAC9B,MAAI,WAAW,OAAO;AAEtB,MAAI,aAAa,MAAM;AACtB,WAAO,WAAW;AAClB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC5C,sBAAgB,SAAS,CAAC,CAAC;AAAA,IAC5B;AAAA,EACD;AACD;AAOO,SAAS,eAAe,SAAS,gBAAgB;AACvD,MAAI,4BAA4B;AAChC,qBAAmB;AACnB,2BAAyB,OAAO;AAChC,MAAI,QAAQ,oBAAoB,OAAO;AACvC,qBAAmB;AAEnB,MAAI,UACF,0BAA0B,QAAQ,IAAI,aAAa,MAAM,QAAQ,SAAS,OACxE,cACA;AAEJ,oBAAkB,SAAS,MAAM;AAEjC,MAAI,CAAC,QAAQ,OAAO,KAAK,GAAG;AAC3B,YAAQ,IAAI;AACZ,mBAAe,SAAS,OAAO,cAAc;AAE7C,QAAI,OAAO,gBAAgB;AAC1B;AAAA,YAAS;AAAA;AAAA,QAAqD,QAAS;AAAA;AAAS,WAAG;AAAA,IACpF;AAAA,EACD;AACD;AAMO,SAAS,gBAAgB,QAAQ;AACvC,2BAAyB,MAAM;AAC/B,mBAAiB,QAAQ,CAAC;AAC1B,oBAAkB,QAAQ,SAAS;AAInC,SAAO,QACN,OAAO,OACP,OAAO,OACP,OAAO;AAAA,EAEP,OAAO,KACN;AACH;;;ACrGA,IAAM,kBAAkB;AACxB,IAAM,aAAa;AAGnB,IAAI,yBAAyB;AAE7B,IAAI,uBAAuB;AACpB,IAAI,qBAAqB;AAGzB,SAAS,uBAAuB,OAAO;AAC7C,uBAAqB;AACtB;AAGO,IAAI,qBAAqB;AAChC,IAAI,uBAAuB;AAK3B,IAAI,8BAA8B,CAAC;AAEnC,IAAI,cAAc;AAIX,IAAI,mBAAmB;AAQvB,IAAI,iBAAiB;AAQrB,IAAI,uBAAuB;AAClC,IAAI,6BAA6B;AAM1B,IAAI,2BAA2B;AAG/B,SAAS,6BAA6B,OAAO;AACnD,6BAA2B;AAC5B;AAGO,IAAI,wBAAwB;AAG5B,SAAS,0BAA0B,QAAQ;AACjD,0BAAwB;AACzB;AAGO,IAAI,qBAAqB;AAIzB,IAAI,wBAAwB;AAE5B,IAAI,sBAAsB;AACjC,IAAI,mBAAmB,oBAAI,IAAI;AAGxB,IAAI,aAAa;AAGxB,IAAI,2BAA2B,CAAC;AAIzB,IAAI,4BAA4B;AAQhC,SAAS,WAAW;AAC1B,SAAO,8BAA8B,QAAQ,0BAA0B;AACxE;AAOO,SAAS,cAAc,QAAQ,MAAM,UAAU;AACrD,QAAM,QAAQ,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AAIhD,SAAO,WAAY;AAClB,UAAM,6BAA6B;AACnC,yBAAqB;AACrB,QAAI;AACH,aAAO,QAAQ,MAAM,OAAO,MAAM,SAAS;AAAA,IAC5C,UAAE;AACD,2BAAqB;AACrB,UAAI,0BAA0B,QAAQ,CAAC,sBAAsB;AAC5D,+BAAuB;AACvB,YAAI;AACH,qBAAW,MAAM,sBAAsB,SAAS;AAC/C,eAAG;AAAA,UACJ;AAAA,QACD,UAAE;AACD,iCAAuB;AAAA,QACxB;AACA,gCAAwB;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AACD;AAQO,SAAS,gBAAgB,UAAU;AACzC,MAAI,QAAQ,SAAS;AAErB,OAAK,QAAQ,WAAW,GAAG;AAC1B,WAAO;AAAA,EACR;AAEA,OAAK,QAAQ,iBAAiB,GAAG;AAChC,QAAI,eAAe,SAAS;AAE5B,QAAI,iBAAiB,MAAM;AAC1B,UAAI,SAAS,aAAa;AAE1B,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,YAAI,aAAa,aAAa,CAAC;AAE/B,YAAI;AAAA;AAAA,UAA0D;AAAA,QAAW,GAAG;AAC3E;AAAA;AAAA,YAA0D;AAAA,YAAa;AAAA,UAAI;AAG3E,eAAK,SAAS,IAAI,WAAW,GAAG;AAC/B,mBAAO;AAAA,UACR;AAAA,QACD;AAMA,YAAI,cAAc,QAAQ,aAAa;AACvC,YAAI,UAAU,WAAW;AAEzB,YAAI,cAAc;AAAA,QAAoD,SAAU,SAAS;AAC/C,UAAC,SAAU,UAAU;AAC9D,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,sBAAkB,UAAU,KAAK;AAAA,EAClC;AAEA,SAAO;AACR;AAOO,SAAS,oBAAoB,QAAQ;AAC3C,QAAM,wBAAwB;AAC9B,QAAM,8BAA8B;AACpC,QAAM,4BAA4B;AAClC,QAAM,oBAAoB;AAC1B,QAAM,yBAAyB;AAC/B,QAAM,sBAAsB;AAE5B;AAAA,EAA2E;AAC3E,+BAA6B;AAC7B,6BAA2B;AAC3B,qBAAmB;AACnB,0BAAwB,CAAC,uBAAuB,OAAO,IAAI,aAAa;AACxE,uBAAqB;AAErB,MAAI;AACH,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI;AAAA;AAAA,MAAsE,OAAO;AAAA;AACjF,QAAI,yBAAyB,MAAM;AAClC,UAAI;AACJ,UAAI,iBAAiB,MAAM;AAC1B,cAAM,cAAc,aAAa;AAEjC,cAAM,4BACL,+BAA+B,IAC5B,uBACA,aAAa,MAAM,GAAG,0BAA0B,EAAE,OAAO,oBAAoB;AACjF,cAAM,qBAAqB,0BAA0B;AAGrD,cAAM,gCACL,qBAAqB,MAAM,cAAc,6BAA6B,IACnE,IAAI,IAAI,yBAAyB,IACjC;AACJ,aAAK,IAAI,4BAA4B,IAAI,aAAa,KAAK;AAC1D,gBAAM,aAAa,aAAa,CAAC;AACjC,cACC,kCAAkC,OAC/B,CAAC,8BAA8B,IAAI,UAAU,IAC7C,CAAC,0BAA0B,SAAS,UAAU,GAChD;AACD,4BAAgB,QAAQ,UAAU;AAAA,UACnC;AAAA,QACD;AAAA,MACD;AAEA,UAAI,iBAAiB,QAAQ,6BAA6B,GAAG;AAC5D,qBAAa,SAAS,6BAA6B,qBAAqB;AACxE,aAAK,IAAI,GAAG,IAAI,qBAAqB,QAAQ,KAAK;AACjD,uBAAa,6BAA6B,CAAC,IAAI,qBAAqB,CAAC;AAAA,QACtE;AAAA,MACD,OAAO;AACN,eAAO;AAAA,QACN,eAAe;AAAA,MAEjB;AAEA,UAAI,CAAC,uBAAuB;AAC3B,aAAK,IAAI,4BAA4B,IAAI,aAAa,QAAQ,KAAK;AAClE,gBAAM,aAAa,aAAa,CAAC;AACjC,gBAAM,YAAY,WAAW;AAE7B,cAAI,cAAc,MAAM;AACvB,uBAAW,YAAY,CAAC,MAAM;AAAA,UAC/B,WAAW,UAAU,UAAU,SAAS,CAAC,MAAM,QAAQ;AAKtD,sBAAU,KAAK,MAAM;AAAA,UACtB;AAAA,QACD;AAAA,MACD;AAAA,IACD,WAAW,iBAAiB,QAAQ,6BAA6B,aAAa,QAAQ;AACrF,uBAAiB,QAAQ,0BAA0B;AACnD,mBAAa,SAAS;AAAA,IACvB;AACA,WAAO;AAAA,EACR,UAAE;AACD,2BAAuB;AACvB,iCAA6B;AAC7B,+BAA2B;AAC3B,uBAAmB;AACnB,4BAAwB;AACxB,yBAAqB;AAAA,EACtB;AACD;AAQA,SAAS,gBAAgB,QAAQ,YAAY;AAC5C,QAAM,YAAY,WAAW;AAC7B,MAAI,mBAAmB;AACvB,MAAI,cAAc,MAAM;AACvB,uBAAmB,UAAU,SAAS;AACtC,UAAM,QAAQ,UAAU,QAAQ,MAAM;AACtC,QAAI,UAAU,IAAI;AACjB,UAAI,qBAAqB,GAAG;AAC3B,mBAAW,YAAY;AAAA,MACxB,OAAO;AAEN,kBAAU,KAAK,IAAI,UAAU,gBAAgB;AAC7C,kBAAU,IAAI;AAAA,MACf;AAAA,IACD;AAAA,EACD;AACA,MAAI,qBAAqB,MAAM,WAAW,IAAI,aAAa,GAAG;AAE7D,sBAAkB,YAAY,KAAK;AACnC;AAAA;AAAA,MAA+D;AAAA,MAAa;AAAA,IAAC;AAAA,EAC9E;AACD;AAOO,SAAS,iBAAiB,QAAQ,aAAa;AACrD,QAAM,eAAe,OAAO;AAC5B,MAAI,iBAAiB,MAAM;AAC1B,UAAM,sBAAsB,gBAAgB,IAAI,OAAO,aAAa,MAAM,GAAG,WAAW;AACxF,QAAI;AACJ,SAAK,IAAI,aAAa,IAAI,aAAa,QAAQ,KAAK;AACnD,YAAM,aAAa,aAAa,CAAC;AAEjC,UAAI,wBAAwB,QAAQ,CAAC,oBAAoB,SAAS,UAAU,GAAG;AAC9E,wBAAgB,QAAQ,UAAU;AAAA,MACnC;AAAA,IACD;AAAA,EACD;AACD;AAMO,SAAS,wBAAwB,QAAQ;AAC/C,MAAIC,UAAS,OAAO;AACpB,SAAO,QAAQ;AACf,SAAO,OAAO;AACd,MAAI;AACJ,SAAOA,YAAW,MAAM;AACvB,cAAUA,QAAO;AACjB,mBAAeA,OAAM;AACrB,IAAAA,UAAS;AAAA,EACV;AACD;AAMO,SAAS,eAAeA,SAAQ;AAlXvC;AAmXC,MAAI,QAAQA,QAAO;AAEnB,OAAK,QAAQ,eAAe,GAAG;AAC9B;AAAA,EACD;AAEA,oBAAkBA,SAAQ,KAAK;AAE/B,MAAI,oBAAoBA,QAAO;AAE/B,MAAI,kBAAkB;AACtB,MAAI,6BAA6B;AAEjC,mBAAiBA;AACjB,8BAA4B;AAE5B,MAAI;AACH,SAAK,QAAQ,kBAAkB,GAAG;AACjC,8BAAwBA,OAAM;AAAA,IAC/B;AAEA,UAAAA,QAAO,aAAP,wBAAAA;AACA,QAAI,WAAW,oBAAoBA,OAAM;AACzC,IAAAA,QAAO,WAAW,OAAO,aAAa,aAAa,WAAW;AAAA,EAC/D,UAAE;AACD,qBAAiB;AACjB,gCAA4B;AAAA,EAC7B;AACD;AAEA,SAAS,sBAAsB;AAC9B,MAAI,cAAc,KAAM;AACvB,kBAAc;AACd,UAAM,IAAI;AAAA,MACT,iCACE,MACE,wLAEA;AAAA,IACL;AAAA,EACD;AACA;AACD;AAMA,SAAS,0BAA0B,cAAc;AAChD,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC7C,QAAI,SAAS,aAAa,CAAC;AAC3B,yBAAqB,QAAQ,gBAAgB,MAAM;AAAA,EACpD;AACD;AAMA,SAAS,qBAAqB,SAAS;AACtC,MAAI,SAAS,QAAQ;AACrB,MAAI,WAAW;AAAG;AAElB,sBAAoB;AACpB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,QAAIA,UAAS,QAAQ,CAAC;AAEtB,SAAKA,QAAO,KAAK,YAAY,YAAY,KAAK,gBAAgBA,OAAM,GAAG;AACtE,qBAAeA,OAAM;AAAA,IACtB;AAAA,EACD;AACD;AAEA,SAAS,oBAAoB;AAC5B,yBAAuB;AACvB,MAAI,cAAc,KAAK;AACtB;AAAA,EACD;AACA,QAAM,+BAA+B;AACrC,gCAA8B,CAAC;AAC/B,4BAA0B,4BAA4B;AACtD,MAAI,CAAC,sBAAsB;AAC1B,kBAAc;AAAA,EACf;AACD;AAMO,SAAS,gBAAgB,QAAQ;AACvC,MAAI,2BAA2B,iBAAiB;AAC/C,QAAI,CAAC,sBAAsB;AAC1B,6BAAuB;AACvB,qBAAe,iBAAiB;AAAA,IACjC;AAAA,EACD;AAEA,MAAIA,UAAS;AAEb,SAAOA,QAAO,WAAW,MAAM;AAC9B,IAAAA,UAASA,QAAO;AAChB,QAAI,QAAQA,QAAO;AAEnB,SAAK,QAAQ,mBAAmB,GAAG;AAClC,WAAK,QAAQ,WAAW;AAAG;AAC3B,wBAAkBA,SAAQ,WAAW;AAAA,IACtC;AAAA,EACD;AAEA,8BAA4B,KAAKA,OAAM;AACxC;AAmBA,SAAS,4BAA4BA,SAAQ,cAAc,SAAS,gBAAgB;AACnF,MAAI,gBAAgBA,QAAO;AAC3B,MAAI,OAAO,CAAC;AAEZ,SAAO,kBAAkB,MAAM;AAC9B,QAAI,QAAQ;AACZ,oBAAgB,MAAM;AACtB,QAAI,QAAQ,MAAM;AAClB,QAAI,eAAe,SAAS,YAAY,YAAY;AACpD,QAAI;AAAa;AACjB,QAAI,YAAY,QAAQ;AACxB,QAAI,YAAY,QAAQ,WAAW;AAEnC,QAAI,WAAW;AAEd,UAAI;AAAU;AACd,wBAAkB,OAAO,KAAK;AAAA,IAC/B;AAEA,SAAK,QAAQ,mBAAmB,GAAG;AAClC,UAAI,WAAW;AACd,YAAI;AAAS;AAEb,oCAA4B,OAAO,cAAc,OAAO,cAAc;AAAA,MACvE,OAAO;AACN,YAAI,gBAAgB,KAAK,GAAG;AAC3B,yBAAe,KAAK;AAAA,QACrB;AAEA,oCAA4B,OAAO,cAAc,OAAO,cAAc;AAAA,MACvE;AAAA,IACD,YAAY,QAAQ,YAAY,GAAG;AAClC,UAAI,aAAa,UAAU;AAC1B,YAAI;AAAS;AAEb,oCAA4B,OAAO,cAAc,OAAO,cAAc;AAAA,MACvE,OAAO;AACN,aAAK,KAAK,KAAK;AAAA,MAChB;AAAA,IACD;AAAA,EACD;AAEA,MAAI,KAAK,SAAS,GAAG;AACpB,SAAK,eAAe,YAAY,GAAG;AAClC,qBAAe,KAAK,GAAG,IAAI;AAAA,IAC5B;AAEA,QAAI,CAAC,SAAS;AACb,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAErC,oCAA4B,KAAK,CAAC,GAAG,cAAc,OAAO,cAAc;AAAA,MACzE;AAAA,IACD;AAAA,EACD;AACD;AAaA,SAAS,qBAAqBA,SAAQ,cAAc,UAAU,OAAO;AAEpE,MAAI,eAAe,CAAC;AAEpB,MAAI,6BAA6B;AACjC,uBAAqB;AAErB,MAAI;AAEH,QAAIA,QAAO,UAAU,SAASA,QAAO,IAAI,mBAAmB,GAAG;AAC9D,2BAAqB,CAACA,OAAM,CAAC;AAAA,IAC9B,OAAO;AACN,kCAA4BA,SAAQ,cAAc,SAAS,YAAY;AACvE,2BAAqB,YAAY;AAAA,IAClC;AAAA,EACD,UAAE;AACD,yBAAqB;AAAA,EACtB;AACD;AAmBO,SAAS,WAAW,IAAI,iBAAiB,MAAM;AACrD,MAAI,0BAA0B;AAC9B,MAAI,+BAA+B;AAEnC,MAAI;AACH,wBAAoB;AAGpB,UAAM,eAAe,CAAC;AAEtB,6BAAyB;AACzB,kCAA8B;AAE9B,QAAI,gBAAgB;AACnB,gCAA0B,4BAA4B;AAAA,IACvD;AAEA,QAAI,SAAS;AAEb,QAAI,4BAA4B,SAAS,KAAK,aAAa,SAAS,GAAG;AACtE,iBAAW;AAAA,IACZ;AAEA,gBAAY;AACZ,kBAAc;AAEd,WAAO;AAAA,EACR,UAAE;AACD,6BAAyB;AACzB,kCAA8B;AAAA,EAC/B;AACD;AAMA,eAAsB,OAAO;AAC5B,QAAM,QAAQ,QAAQ;AAGtB,aAAW;AACZ;AAOO,SAAS,IAAI,QAAQ;AAE3B,MAAI,OAAO,OAAO,WAAW,YAAY;AACO,IAAC,OAAQ,QAAQ,IAAI,UAAU;AAE9E,6BAAyB,KAAK,MAAM;AAAA,EACrC;AAEA,QAAM,QAAQ,OAAO;AACrB,OAAK,QAAQ,eAAe,GAAG;AAC9B,WAAO,OAAO;AAAA,EACf;AAEA,MAAI,qBAAqB;AACxB,qBAAiB,IAAI,MAAM;AAAA,EAC5B;AAGA,MACC,qBAAqB,SACpB,iBAAiB,IAAI,mBAAmB,KACzC,CAAC,oBACA;AACD,UAAM,WAAW,iBAAiB,IAAI,aAAa;AACnD,UAAM,eAAe,iBAAiB;AACtC,QACC,yBAAyB,QACzB,iBAAiB,QACjB,aAAa,0BAA0B,MAAM,UAC7C,EAAE,WAAW,mBAAmB,OAC/B;AACD;AAAA,IACD,WACC,iBAAiB,QACjB,+BAA+B,KAC/B,aAAa,6BAA6B,CAAC,MAAM,QAChD;AACD,UAAI,yBAAyB,MAAM;AAClC,+BAAuB,CAAC,MAAM;AAAA,MAC/B,OAAO;AACN,6BAAqB,KAAK,MAAM;AAAA,MACjC;AAAA,IACD;AACA,QACC,6BAA6B,QAC7B,mBAAmB,SAClB,eAAe,IAAI,WAAW,MAC9B,eAAe,IAAI,mBAAmB,KACvC,yBAAyB,SAAS,MAAM,GACvC;AACD,wBAAkB,gBAAgB,KAAK;AACvC,sBAAgB,cAAc;AAAA,IAC/B;AAAA,EACD;AAEA,OACE,QAAQ,aAAa,KACtB;AAAA;AAAA,IAA0D;AAAA,EAAO,GAChE;AACD,QAAI,KAAK;AAER,YAAM,sBAAsB;AAC5B,mBAAa;AACb;AAAA;AAAA,QAA6D;AAAA,QAAS;AAAA,MAAK;AAC3E,mBAAa;AAAA,IACd,OAAO;AACN;AAAA;AAAA,QAA6D;AAAA,QAAS;AAAA,MAAK;AAAA,IAC5E;AAAA,EACD;AACA,SAAO,OAAO;AACf;AAoCO,SAAS,eAAe,QAAQ,WAAW,gBAAgB;AACjE,MAAI,YAAY,OAAO;AACvB,MAAI,cAAc;AAAM;AAExB,MAAI,QAAQ,SAAS;AACrB,MAAI,SAAS,UAAU;AAEvB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,QAAI,WAAW,UAAU,CAAC;AAK1B,SAAK,CAAC,kBAAkB,CAAC,UAAU,aAAa,gBAAgB;AAC/D;AAAA,IACD;AAEA,QAAI,QAAQ,SAAS;AACrB,sBAAkB,UAAU,SAAS;AAKrC,QAAI,eAAe,QAAQ,iBAAiB;AAC5C,QAAI,WAAW,QAAQ,aAAa;AAEpC,SAAK,QAAQ,WAAW,KAAM,eAAe,SAAU;AACtD,WAAK,SAAS,IAAI,aAAa,GAAG;AACjC;AAAA;AAAA,UAC2C;AAAA,UAC1C;AAAA,UACA;AAAA,QACD;AAAA,MACD,OAAO;AACN;AAAA;AAAA,UAAyD;AAAA,QAAS;AAAA,MACnE;AAAA,IACD;AAAA,EACD;AACD;AAUO,SAAS,QAAQ,IAAI;AAC3B,QAAM,sBAAsB;AAC5B,MAAI;AACH,yBAAqB;AACrB,WAAO,GAAG;AAAA,EACX,UAAE;AACD,yBAAqB;AAAA,EACtB;AACD;AAEA,IAAM,cAAc,EAAE,QAAQ,cAAc;AAOrC,SAAS,kBAAkB,QAAQ,QAAQ;AACjD,SAAO,IAAK,OAAO,IAAI,cAAe;AACvC;AAwBO,SAAS,WAAW,KAAK;AAC/B,QAAM,cAAc,wBAAwB;AAC5C,QAAM;AAAA;AAAA,IAA2B,YAAY,IAAI,GAAG;AAAA;AAEpD,MAAI,KAAK;AAER,UAAM,KAAK,uEAA2B;AACtC,QAAI,IAAI;AACP,gBAAU,QAAQ,EAAE;AAAA,IACrB;AAAA,EACD;AAEA,SAAO;AACR;AAeO,SAAS,WAAW,KAAK,SAAS;AACxC,QAAM,cAAc,wBAAwB;AAC5C,cAAY,IAAI,KAAK,OAAO;AAC5B,SAAO;AACR;AAUO,SAAS,WAAW,KAAK;AAC/B,QAAM,cAAc,wBAAwB;AAC5C,SAAO,YAAY,IAAI,GAAG;AAC3B;AAWO,SAAS,iBAAiB;AAChC,QAAM,cAAc,wBAAwB;AAE5C,MAAI,KAAK;AAER,UAAM,KAAK,uEAA2B;AACtC,QAAI,IAAI;AACP,iBAAW,SAAS,YAAY,OAAO,GAAG;AACzC,kBAAU,OAAO,EAAE;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AAEA;AAAA;AAAA,IAAyB;AAAA;AAC1B;AAGA,SAAS,0BAA0B;AAClC,QAAM,oBAAoB;AAC1B,MAAI,sBAAsB,MAAM;AAC/B,UAAM,IAAI;AAAA,MACT,+BACE,MAAM,8DAA8D;AAAA,IACvE;AAAA,EACD;AACA,SAAQ,kBAAkB,MAAlB,kBAAkB,IAAM,IAAI,IAAI,mBAAmB,iBAAiB,KAAK,MAAS;AAC3F;AAMA,SAAS,mBAAmB,mBAAmB;AAC9C,MAAI,SAAS,kBAAkB;AAC/B,SAAO,WAAW,MAAM;AACvB,UAAM,cAAc,OAAO;AAC3B,QAAI,gBAAgB,MAAM;AACzB,aAAO;AAAA,IACR;AACA,aAAS,OAAO;AAAA,EACjB;AACA,SAAO;AACR;AAsDO,SAAS,KAAK,OAAO,QAAQ,OAAO,IAAI;AAC9C,8BAA4B;AAAA;AAAA,IAE3B,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,GAAG;AAAA;AAAA,IAEH,IAAI,CAAC;AAAA,IACL,IAAI,OAAO,KAAK;AAAA;AAAA,IAEhB,GAAG;AAAA,EACJ;AAEA,MAAI,KAAK;AAGR,8BAA0B,WAAW;AAAA,EACtC;AACD;AAOO,SAAS,IAAI,WAAW;AAC9B,QAAM,qBAAqB;AAC3B,MAAI,uBAAuB,MAAM;AAChC,QAAI,cAAc,QAAW;AAC5B,yBAAmB,IAAI;AAAA,IACxB;AACA,UAAM,UAAU,mBAAmB;AACnC,QAAI,YAAY,MAAM;AACrB,yBAAmB,IAAI;AACvB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,eAAO,QAAQ,CAAC,CAAC;AAAA,MAClB;AAAA,IACD;AACA,gCAA4B,mBAAmB;AAC/C,uBAAmB,IAAI;AAAA,EACxB;AAGA,SAAO;AAAA,EAA+B,CAAC;AACxC;AAqKA,IAAI,KAAK;AAIR,MAAS,mBAAT,SAA0B,MAAM;AAC/B,QAAI,EAAE,QAAQ,aAAa;AAG1B,UAAI;AACJ,aAAO,eAAe,YAAY,MAAM;AAAA,QACvC,cAAc;AAAA,QACd,KAAK,MAAM;AACV,cAAI,UAAU,QAAW;AACxB,mBAAO;AAAA,UACR;AACA,gBAAM,IAAI;AAAA,YACT,OAAO,IAAI;AAAA,UACZ;AAAA,QACD;AAAA,QACA,KAAK,CAAC,MAAM;AACX,kBAAQ;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAEA,mBAAiB,QAAQ;AACzB,mBAAiB,SAAS;AAC1B,mBAAiB,UAAU;AAC3B,mBAAiB,UAAU;AAC3B,mBAAiB,QAAQ;AACzB,mBAAiB,WAAW;AAC7B;;;AC9sCO,SAAS,MAAM,OAAO,YAAY,MAAM,QAAQ;AACtD,MAAI,OAAO,UAAU,YAAY,SAAS,QAAQ,CAAC,UAAU,KAAK,GAAG;AAEpE,QAAI,gBAAgB,OAAO;AAC1B,YAAM;AAAA;AAAA,QAA8D,MAAM,YAAY;AAAA;AAGtF,UAAI,SAAS,MAAM,SAAS,SAAS,MAAM,OAAO;AACjD,YAAI,KAAK;AAER,cAAI,QAAQ;AACX,uBAAW,SAAS,QAAQ;AAC3B,wBAAU,OAAO,KAAK;AAAA,YACvB;AAAA,UACD,OAAO;AACN,wBAAY,KAAK;AAAA,UAClB;AAAA,QACD;AAEA,eAAO,SAAS;AAAA,MACjB;AAAA,IACD;AAEA,UAAM,YAAY,iBAAiB,KAAK;AAExC,QAAI,cAAc,oBAAoB,cAAc,iBAAiB;AACpE,YAAMC,SAAQ,IAAI,MAAM,OAAO,mBAAmB;AAElD,sBAAgB,OAAO,cAAc;AAAA,QACpC;AAAA;AAAA,UAAuD;AAAA,YACtD,GAAG,oBAAI,IAAI;AAAA,YACX,GAAG,OAAO,CAAC;AAAA,YACX,GAAG,SAAS,KAAK;AAAA,YACjB,GAAG;AAAA,YACH,GAAGA;AAAA,YACH,GAAG;AAAA,UACJ;AAAA;AAAA,QACA,UAAU;AAAA,QACV,YAAY;AAAA,MACb,CAAC;AAED,UAAI,KAAK;AAIR,cAAM,YAAY,EAAE,IACnB,WAAW,SACR;AAAA;AAAA,UAEA,oBAAI,IAAI,CAAC,0BAA0B,QAAQ,CAAC;AAAA,YAC3C,OACD,UAAU,IAAI,IAAI,MAAM;AAAA,MAC7B;AAEA,aAAOA;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAQA,SAAS,OAAO,OAAO,mBAAmB;AACzC,MAAI,OAAO,UAAU,YAAY,SAAS,QAAQ,gBAAgB,OAAO;AACxE,UAAM,YAAY,kBAAkB,IAAI,KAAK;AAC7C,QAAI,cAAc,QAAW;AAC5B,aAAO;AAAA,IACR;AAEA,QAAI,SAAS,KAAK,GAAG;AAEpB,YAAM,QAAQ,CAAC;AACf,wBAAkB,IAAI,OAAO,KAAK;AAClC,iBAAW,WAAW,OAAO;AAC5B,cAAM,KAAK,OAAO,SAAS,iBAAiB,CAAC;AAAA,MAC9C;AACA,aAAO;AAAA,IACR,OAAO;AAEN,YAAM,MAAM,CAAC;AACb,YAAM,OAAO,QAAQ,QAAQ,KAAK;AAClC,YAAM,cAAc,gBAAgB,KAAK;AACzC,wBAAkB,IAAI,OAAO,GAAG;AAEhC,iBAAW,OAAO,MAAM;AACvB,YAAI,QAAQ;AAAc;AAC1B,YAAI,YAAY,GAAG,EAAE,KAAK;AACzB,0BAAgB,KAAK,KAAK,YAAY,GAAG,CAAC;AAAA,QAC3C,OAAO;AAEN,gBAAM,WAAW,MAAM,GAAG;AAC1B,cAAI,GAAG,IAAI,OAAO,UAAU,iBAAiB;AAAA,QAC9C;AAAA,MACD;AAEA,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAOO,SAAS,QAAQ,OAAO;AAC9B;AAAA;AAAA,IACC;AAAA;AAAA,MAA0D;AAAA,MAAQ,oBAAI,IAAI;AAAA,IAAC;AAAA;AAE7E;AAMA,SAAS,eAAe,QAAQ,IAAI,GAAG;AACtC,MAAI,QAAQ,OAAO,IAAI,CAAC;AACzB;AAGA,IAAM,sBAAsB;AAAA,EAC3B,eAAe,QAAQ,MAAM,YAAY;AACxC,QAAI,WAAW,OAAO;AAErB,YAAM,WAAW,OAAO,YAAY;AAEpC,YAAM,IAAI,SAAS,EAAE,IAAI,IAAI;AAC7B,UAAI,MAAM;AAAW,YAAI,GAAG,MAAM,WAAW,OAAO,SAAS,GAAG,SAAS,CAAC,CAAC;AAAA,IAC5E;AAEA,WAAO,QAAQ,eAAe,QAAQ,MAAM,UAAU;AAAA,EACvD;AAAA,EAEA,eAAe,QAAQ,MAAM;AAE5B,UAAM,WAAW,OAAO,YAAY;AACpC,UAAM,IAAI,SAAS,EAAE,IAAI,IAAI;AAC7B,UAAMC,YAAW,SAAS;AAC1B,UAAM,UAAU,OAAO,OAAO,IAAI;AAQlC,QAAIA,aAAY,SAAS;AACxB,YAAM,KAAK,SAAS,EAAE,IAAI,QAAQ;AAClC,YAAM,SAAS,OAAO,SAAS;AAC/B,UAAI,OAAO,UAAa,GAAG,MAAM,QAAQ;AACxC,YAAI,IAAI,MAAM;AAAA,MACf;AAAA,IACD;AACA,QAAI,MAAM;AAAW,UAAI,GAAG,aAAa;AAEzC,QAAI,SAAS;AACZ,qBAAe,SAAS,CAAC;AAAA,IAC1B;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,QAAQ,MAAM,UAAU;AAnM7B;AAoME,QAAI,SAAS,cAAc;AAC1B,aAAO,QAAQ,IAAI,QAAQ,YAAY;AAAA,IACxC;AAGA,UAAM,WAAW,OAAO,YAAY;AACpC,QAAI,IAAI,SAAS,EAAE,IAAI,IAAI;AAI3B,QACC,MAAM,WACL,cAAc,KAAK,sBACnB,EAAE,QAAQ,aAAW,oBAAe,QAAQ,IAAI,MAA3B,mBAA8B,YACnD;AACD,WAAK,SAAS,IAAI,SAAS,gBAAgB,MAAM,OAAO,IAAI,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;AACtF,eAAS,EAAE,IAAI,MAAM,CAAC;AAAA,IACvB;AAEA,QAAI,MAAM,QAAW;AACpB,YAAM,QAAQ,IAAI,CAAC;AACnB,aAAO,UAAU,gBAAgB,SAAY;AAAA,IAC9C;AAEA,QAAI,KAAK;AACR,UAAI,OAAO,OAAO,IAAI,MAAM,cAAc,SAAS,OAAO,UAAU;AACnE,eAAO,cAAc,QAAQ,MAAM,QAAQ;AAAA,MAC5C;AAAA,IACD;AACA,WAAO,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AAAA,EAC1C;AAAA,EAEA,yBAAyB,QAAQ,MAAM;AACtC,UAAM,aAAa,QAAQ,yBAAyB,QAAQ,IAAI;AAChE,QAAI,cAAc,WAAW,YAAY;AAExC,YAAM,WAAW,OAAO,YAAY;AACpC,YAAM,IAAI,SAAS,EAAE,IAAI,IAAI;AAE7B,UAAI,GAAG;AACN,mBAAW,QAAQ,IAAI,CAAC;AAAA,MACzB;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,QAAQ,MAAM;AAnPnB;AAoPE,QAAI,SAAS,cAAc;AAC1B,aAAO;AAAA,IACR;AAEA,UAAM,WAAW,OAAO,YAAY;AACpC,UAAM,MAAM,QAAQ,IAAI,QAAQ,IAAI;AAEpC,QAAI,IAAI,SAAS,EAAE,IAAI,IAAI;AAC3B,QAAI,MAAM,UAAc,cAAc,MAAM,CAAC,SAAO,oBAAe,QAAQ,IAAI,MAA3B,mBAA8B,YAAY;AAC7F,UAAI,MAAM,QAAW;AACpB,aAAK,SAAS,IAAI,SAAS;AAAA,UAC1B,MAAM,MAAM,OAAO,IAAI,GAAG,SAAS,GAAG,SAAS,CAAC,IAAI;AAAA,QACrD;AACA,iBAAS,EAAE,IAAI,MAAM,CAAC;AAAA,MACvB;AACA,YAAM,QAAQ,IAAI,CAAC;AACnB,UAAI,UAAU,eAAe;AAC5B,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,QAAQ,MAAM,OAAO,UAAU;AAElC,UAAM,WAAW,OAAO,YAAY;AACpC,QAAI,IAAI,SAAS,EAAE,IAAI,IAAI;AAK3B,QAAI,MAAM,UAAa,cAAc,GAAG;AAEvC,cAAQ,MAAM,SAAS,IAAI,CAAC;AAC5B,UAAI,SAAS,EAAE,IAAI,IAAI;AAAA,IACxB;AACA,QAAI,MAAM,QAAW;AACpB,UAAI,GAAG,MAAM,OAAO,SAAS,GAAG,SAAS,CAAC,CAAC;AAAA,IAC5C;AACA,UAAMA,YAAW,SAAS;AAC1B,UAAM,UAAU,EAAE,QAAQ;AAE1B,QAAI,KAAK;AAIR,UAAI,SAAS,GAAG;AACf,wBAAgB,SAAS,CAAC;AAC1B,mBAAW,SAAS,SAAS,GAAG;AAC/B,oBAAU,OAAO,KAAK;AAAA,QACvB;AAAA,MACD,OAAO;AACN,oBAAY,KAAK;AAAA,MAClB;AAAA,IACD;AAGA,QAAIA,aAAY,SAAS,UAAU;AAClC,eAAS,IAAI,OAAO,IAAI,OAAO,QAAQ,KAAK,GAAG;AAC9C,cAAMC,KAAI,SAAS,EAAE,IAAI,IAAI,EAAE;AAC/B,YAAIA,OAAM;AAAW,cAAIA,IAAG,aAAa;AAAA,MAC1C;AAAA,IACD;AAIA,WAAO,IAAI,IAAI;AAEf,QAAI,SAAS;AAKZ,UAAID,WAAU;AACb,cAAM,KAAK,SAAS,EAAE,IAAI,QAAQ;AAClC,cAAM,SAAS,OAAO;AACtB,YAAI,OAAO,UAAa,GAAG,MAAM,QAAQ;AACxC,cAAI,IAAI,MAAM;AAAA,QACf;AAAA,MACD;AACA,qBAAe,SAAS,CAAC;AAAA,IAC1B;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,QAAQ;AAEf,UAAM,WAAW,OAAO,YAAY;AAEpC,QAAI,SAAS,CAAC;AACd,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AACD;AAEA,IAAI,KAAK;AACR,sBAAoB,iBAAiB,MAAM;AAC1C,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACxD;AACD;;;ACjVO,IAAI,YAAY;AAGhB,SAAS,cAAc,OAAO;AACpC,cAAY;AACb;AAQO,IAAI;AAAA;AAAA,EAAoC;AAAA;AAGxC,SAAS,kBAAkB,OAAO;AACxC,kBAAgB;AACjB;AASO,SAAS,eAAe,MAAM;AACpC,MAAI,KAAK,aAAa,GAAG;AACxB,WAAO;AAAA,EACR;AAEA,MAAI;AAAA;AAAA,IAAsC;AAAA;AAG1C;AAAA;AAAA,KAA4B,mCAAU,UAAS;AAAA,IAAiB;AAC/D,WAAO;AAAA,EACR;AAGA,MAAI,QAAQ,CAAC;AACb,MAAI,QAAQ;AAEZ,UAAQ;AAAA,EAA+B,QAAS,iBAAiB,MAAM;AACtE,QAAI,QAAQ,aAAa,GAAG;AAC3B,UAAI;AAAA;AAAA,QAA+B,QAAS;AAAA;AAE5C,UAAI,SAAS,iBAAiB;AAC7B,iBAAS;AAAA,MACV,WAAW,SAAS,eAAe;AAClC,YAAI,UAAU,GAAG;AAChB;AAAA,UAAiE;AACjE,iBAAO;AAAA,QACR;AAEA,iBAAS;AAAA,MACV;AAAA,IACD;AAEA,UAAM,KAAK,OAAO;AAAA,EACnB;AAEA,QAAM,IAAI,MAAM,qCAAqC;AACtD;;;AC9DA,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAGJ,IAAI;AAMG,IAAI;AAIJ,IAAI;AAMJ,SAAS,kBAAkB;AACjC,MAAI,mBAAmB,QAAW;AACjC;AAAA,EACD;AAEA,mBAAiB,KAAK;AACtB,sBAAoB,QAAQ;AAC5B,mBAAiB,KAAK;AAEtB,wBAAsB,eAAe;AACrC,sBAAoB,eAAe;AAEnC,YAAU;AACV,cAAY;AAIZ,oBAAkB,UAAU;AAE5B,iBAAe,cAAc;AAE7B,oBAAkB,cAAc;AAEhC,oBAAkB,eAAe;AAEjC;AAAA;AAAA,EAEC,eAAe,gBAAgB,YAAY,EAAE;AAG9C;AAAA;AAAA,EAEC,eAAe,gBAAgB,aAAa,EAAE;AAG/C;AAAA;AAAA,EAEC,eAAe,gBAAgB,aAAa,EAAE;AAG/C;AAAA;AAAA,EAEC,eAAe,mBAAmB,WAAW,EAAE;AAEjD;AAmBO,SAAS,WAAW,MAAM,MAAM;AACtC;AAAA;AAAA,IAAyB,kBAAkB,KAAK,MAAM,IAAI;AAAA;AAC3D;AAGO,SAAS,QAAQ;AACvB,SAAO,SAAS,eAAe,EAAE;AAClC;AA8FO,SAAS,mBAAmB,MAAM;AACxC,mBAAiB,KAAK,MAAM,EAAE;AAC/B;;;AC1JO,SAAS,yBAAyB,iBAAiB,OAAO;AA3DjE;AA4DC,MAAI,iBAAiB,gBAAgB;AACrC,MAAI,aAAa,MAAM;AACvB,MAAI,SAAO,WAAM,iBAAN,mCAA0B,CAAC;AACtC,MAAI;AAAA;AAAA,IAAgD,KAAK,CAAC,KAAK,MAAM;AAAA;AAErE,MAAI,MAAM,WAAW,gBAAgB;AACpC,oBAAgB,OAAO,UAAU;AAAA,MAChC,cAAc;AAAA,MACd,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AAMA,MAAI,WAAW;AAGf,MAAI,aAAa,MAAM;AAEvB,MAAI,YAAY;AACf,QAAI,SAAS,KAAK,QAAQ,UAAU;AACpC,QACC,WAAW,OACV,oBAAoB,YAAY;AAAA,IAAwC,SACxE;AAKD,YAAM,SAAS;AACf;AAAA,IACD;AAOA,QAAI,cAAc,KAAK,QAAQ,eAAe;AAC9C,QAAI,gBAAgB,IAAI;AAGvB;AAAA,IACD;AAEA,QAAI,UAAU,aAAa;AAG1B,iBAAW,SAAS;AAAA,IACrB;AAAA,EACD;AAEA;AAAA,EAAyC,KAAK,QAAQ,KAAK,MAAM;AAGjE,kBAAgB,OAAO,iBAAiB;AAAA,IACvC,cAAc;AAAA,IACd,MAAM;AACL,aAAO,kBAAkB;AAAA,IAC1B;AAAA,EACD,CAAC;AAED,SAAO,mBAAmB,MAAM;AAE/B,QAAI,iBACH,eAAe;AAAA,IAAkC,eAAgB,QAAQ;AAC1E,QAAI,qBAAqB,OAAO;AAEhC,QAAI,YAAY,eAAe,kBAAkB;AAEjD,QAAI,cAAc,UAAa;AAAA,IAAsB,eAAgB,UAAW;AAC/E,UAAI,SAAS,SAAS,GAAG;AACxB,YAAI,CAAC,IAAI,GAAG,IAAI,IAAI;AACpB,WAAG,MAAM,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC;AAAA,MAC1C,OAAO;AACN,kBAAU,KAAK,gBAAgB,KAAK;AAAA,MACrC;AAAA,IACD;AAEA,QACC,MAAM,gBACN,mBAAmB,mBACnB,mBAAmB,iBAClB;AACD;AAAA,IACD;AAEA,qBAAiB;AAAA,EAClB;AAGA,QAAM,SAAS;AAEf,mBAAiB;AAClB;;;ACtIO,IAAM,wBAAwB,oBAAI,IAAI;AAGtC,IAAM,qBAAqB,oBAAI,IAAI;AAOnC,IAAI,eAAe;AAmEnB,SAAS,MAAM,WAAW,SAAS;AACzC,QAAM,SAAS,QAAQ,OAAO,YAAY,MAAM,CAAC;AAEjD,SAAO,WAAW,MAAM,OAAO,WAAW,EAAE,GAAG,SAAS,OAAO,CAAC,GAAG,KAAK;AACzE;AAmBO,SAAS,QAAQ,WAAW,SAAS;AAC3C,QAAM,SAAS,QAAQ;AACvB,QAAM,yBAAyB;AAE/B,MAAI,WAAW;AAEf,MAAI;AAEH,WAAO,WAAW,MAAM;AACvB,oBAAc,IAAI;AAElB,UAAI,OAAO,OAAO;AAClB,aACC,SACC,KAAK,aAAa;AAAA,MAA6B,KAAM,SAAS,kBAC9D;AACD,eAAO,KAAK;AAAA,MACb;AAEA,UAAI,CAAC,MAAM;AACV,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC3C;AAEA,YAAM,SAAS,eAAe,IAAI;AAClC,YAAM,WAAW,OAAO,WAAW,EAAE,GAAG,SAAS,OAAO,CAAC;AAIzD,oBAAc,KAAK;AACnB,iBAAW;AAEX,aAAO;AAAA,IACR,GAAG,KAAK;AAAA,EACT,SAAS,OAAO;AACf,QAAI,CAAC,YAAY,QAAQ,YAAY,OAAO;AAE3C,cAAQ;AAAA,QACP,mCACE,MACE,8FACA;AAAA,QACJ;AAAA,MACD;AAEA,yBAAmB,MAAM;AAEzB,oBAAc,KAAK;AACnB,aAAO,MAAM,WAAW,OAAO;AAAA,IAChC,OAAO;AACN,YAAM;AAAA,IACP;AAAA,EACD,UAAE;AACD,kBAAc,CAAC,CAAC,sBAAsB;AACtC,sBAAkB,sBAAsB;AAAA,EACzC;AACD;AAiBA,SAAS,OACR,WACA,EAAE,QAAQ,QAAQ;AAAA;AAAA,EAA8B,CAAC;AAAA,GAAI,QAAQ,SAAS,QAAQ,MAAM,GACnF;AACD,kBAAgB;AAEhB,QAAM,oBAAoB,oBAAI,IAAI;AAElC,QAAM,uBAAuB,yBAAyB,KAAK,MAAM,MAAM;AACvE,QAAM,gCAAgC,yBAAyB,KAAK,MAAM,QAAQ;AAGlF,QAAM,eAAe,CAACE,YAAW;AAChC,aAAS,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK;AACvC,YAAM,aAAaA,QAAO,CAAC;AAC3B,UAAI,CAAC,kBAAkB,IAAI,UAAU,GAAG;AACvC,0BAAkB,IAAI,UAAU;AAIhC,eAAO;AAAA,UACN;AAAA,UACA;AAAA,UACA,uBAAuB,SAAS,UAAU,IACvC;AAAA,YACA,SAAS;AAAA,UACV,IACC;AAAA,QACJ;AAGA,iBAAS;AAAA,UACR;AAAA,UACA;AAAA,UACA,uBAAuB,SAAS,UAAU,IACvC;AAAA,YACA,SAAS;AAAA,UACV,IACC;AAAA,QACJ;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,eAAa,WAAW,qBAAqB,CAAC;AAC9C,qBAAmB,IAAI,YAAY;AAInC,MAAI,YAAY;AAEhB,QAAMC,WAAU,YAAY,MAAM;AACjC,WAAO,MAAM;AACZ,cAAQ,MAAM;AACb,YAAI,SAAS;AACZ,eAAK,CAAC,CAAC;AACP,cAAI;AAAA;AAAA,YAAyD;AAAA;AAC7D,cAAI,IAAI;AAAA,QACT;AAEA,YAAI,QAAQ;AAEQ,UAAC,MAAO,WAAW;AAAA,QACvC;AAEA,uBAAe;AAEf,oBAAY,UAAU,QAAQ,KAAK,KAAK,CAAC;AACzC,uBAAe;AAEf,YAAI,SAAS;AACZ,cAAI;AAAA,QACL;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,WAAO,MAAM;AACZ,iBAAW,cAAc,mBAAmB;AAC3C,eAAO,oBAAoB,YAAY,oBAAoB;AAAA,MAC5D;AACA,yBAAmB,OAAO,YAAY;AAAA,IACvC;AAAA,EACD,CAAC;AAED,qBAAmB,IAAI,WAAWA,QAAO;AACzC,SAAO;AACR;AAMA,IAAI,qBAAqB,oBAAI,QAAQ;AAM9B,SAAS,QAAQ,WAAW;AAClC,QAAM,KAAK,mBAAmB,IAAI,SAAS;AAC3C,MAAI,OAAO,CAAC,IAAI;AAEf,YAAQ,KAAK,oDAAoD;AAAA,EAClE;AACA;AACD;;;ACrRO,SAAS,qBAAqB,SAAS;AAE7C,SAAO,IAAI,iBAAiB,OAAO;AACpC;AAeO,SAAS,iBAAiB,WAAW;AAE3C,SAAO,cAAc,iBAAiB;AAAA;AAAA,IAErC,YAAY,SAAS;AACpB,YAAM;AAAA,QACL;AAAA,QACA,GAAG;AAAA,MACJ,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAnDA;AAqDA,IAAM,mBAAN,MAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAetB,YAAY,SAAS;AAbrB;AAAA,gCAAU,CAAC;AAGX;AAAA;AAcC,UAAM,QAAQ,MAAM,EAAE,GAAI,QAAQ,SAAS,CAAC,GAAI,UAAU,mBAAK,SAAQ,GAAG,KAAK;AAC/E,uBAAK,YAAa,QAAQ,UAAU,UAAU,OAAO,QAAQ,WAAW;AAAA,MACvE,QAAQ,QAAQ;AAAA,MAChB;AAAA,MACA,SAAS,QAAQ;AAAA,MACjB,OAAO,QAAQ;AAAA,MACf,SAAS,QAAQ;AAAA,IAClB,CAAC;AAED,eAAW,OAAO,OAAO,KAAK,mBAAK,UAAS,GAAG;AAC9C,UAAI,QAAQ,UAAU,QAAQ,cAAc,QAAQ;AAAO;AAC3D,sBAAgB,MAAM,KAAK;AAAA,QAC1B,MAAM;AACL,iBAAO,mBAAK,WAAU,GAAG;AAAA,QAC1B;AAAA;AAAA,QAEA,IAAI,OAAO;AACV,6BAAK,WAAU,GAAG,IAAI;AAAA,QACvB;AAAA,QACA,YAAY;AAAA,MACb,CAAC;AAAA,IACF;AAEA,uBAAK,WAAU;AAAA,IAAgD,CAAC,SAAS;AACxE,aAAO,OAAO,OAAO,IAAI;AAAA,IAC1B;AACA,uBAAK,WAAU,WAAW,MAAM;AAC/B,cAAQ,mBAAK,UAAS;AAAA,IACvB;AAAA,EACD;AAAA;AAAA,EAGA,KAAK,OAAO;AACX,uBAAK,WAAU,KAAK,KAAK;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO,UAAU;AACpB,uBAAK,SAAQ,KAAK,IAAI,mBAAK,SAAQ,KAAK,KAAK,CAAC;AAG9C,UAAM,KAAK,IAAI,SAAS,SAAS,KAAK,MAAM,GAAG,IAAI;AACnD,uBAAK,SAAQ,KAAK,EAAE,KAAK,EAAE;AAC3B,WAAO,MAAM;AACZ,yBAAK,SAAQ,KAAK,IAAI,mBAAK,SAAQ,KAAK,EAAE;AAAA;AAAA,QAA8B,CAAC,OAAO,OAAO;AAAA,MAAE;AAAA,IAC1F;AAAA,EACD;AAAA,EAEA,WAAW;AACV,uBAAK,WAAU,SAAS;AAAA,EACzB;AACD;AAxEC;AAGA;",
  "names": ["source", "effect", "effect", "effect", "effect", "proxy", "is_array", "s", "events", "unmount"]
}
